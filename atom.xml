<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://KriseWang.github.io</id>
    <title>KriseWang</title>
    <updated>2020-01-16T11:52:59.747Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://KriseWang.github.io"/>
    <link rel="self" href="https://KriseWang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://KriseWang.github.io/images/avatar.png</logo>
    <icon>https://KriseWang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, KriseWang</rights>
    <entry>
        <title type="html"><![CDATA[AQS补充——关于LockSupport和acquireQueue()]]></title>
        <id>https://KriseWang.github.io/post/aqs-bu-chong-guan-yu-locksupport-he-acquirequeue</id>
        <link href="https://KriseWang.github.io/post/aqs-bu-chong-guan-yu-locksupport-he-acquirequeue">
        </link>
        <updated>2020-01-16T11:52:38.000Z</updated>
        <content type="html"><![CDATA[<p>先关注LockSupport</p>
<pre><code class="language-java">/**
 * Basic thread blocking primitives for creating locks and other
 * synchronization classes.
 *	...
 */
</code></pre>
<p>一开始这句话能够理解这是一个基本阻塞工具，AQS中实现了队列，但是当一个线程没有获取锁的时候，是如何阻塞的呢，便是基于这个类。</p>
<h2 id="1-locksupport-重要api">1、LockSupport 重要API</h2>
<p><strong>Park</strong></p>
<pre><code class="language-java"> public static void park(Object blocker) {
        Thread t = Thread.currentThread();
        setBlocker(t, blocker);
        UNSAFE.park(false, 0L);		//核心在这句，等待unpark
        setBlocker(t, null);
    }
/**
	当前park的线程, parkBlocker对象,类似于sync(o).
	private static void setBlocker(Thread t, Object arg) {
   	 // Even though volatile, hotspot doesn't need a write barrier here.
  	  UNSAFE.putObject(t, parkBlockerOffset, arg);
	}
  */

 public static void park() {
        UNSAFE.park(false, 0L);		//核心在这句，等待unpark
    }
</code></pre>
<p>大体上就是加锁等待，其他parkNano等方法类似sleep。</p>
<p><strong>unPark</strong></p>
<pre><code class="language-java">//解除封印
public static void unpark(Thread thread) {
    if (thread != null)
        UNSAFE.unpark(thread);
}
</code></pre>
<h2 id="2-一个互斥锁">2、 一个互斥锁</h2>
<p>基于LockSupport实现，来自于<strong>java.util.concurrent.locks.LockSupport</strong>.</p>
<pre><code class="language-java">class FIFOMutex {

    // 标识
    private final AtomicBoolean locked = new AtomicBoolean(false);

    // 等待队列
    private final Queue&lt;Thread&gt; waiters = new ConcurrentLinkedQueue&lt;Thread&gt;();

    // 加锁
    public void lock() {
        boolean wasInterrupted = false;
        Thread current = Thread.currentThread();
        // 线程安全的
        waiters.add(current);

        // 头节点是当前线程,且lock为true ,则代表不需要阻塞.循环的目的就是防止用户执行unpark
        while (waiters.peek() != current || !locked.compareAndSet(false, true)) {
            // 执行到这里会阻塞/等待
            LockSupport.park(this);
            if (Thread.interrupted()) // ignore interrupts while waiting
                wasInterrupted = true;
        }

        // 移除头节点,因为当前线程不需要等待.
        waiters.remove();
        if (wasInterrupted)          // reassert interrupt status on exit
            current.interrupt();
    }

    // 解锁
    public void unlock() {
        // 设置,这里由于就一个线程操作, 所以不需要cas操作.
        locked.set(false);
        // unPark下一个等待的线程.
        LockSupport.unpark(waiters.peek());
    }
}

</code></pre>
<h2 id="acquirequeue">acquireQueue（）</h2>
<p>我们先从acquire开始分析：</p>
<pre><code class="language-java">public final void acquire(int arg) {
     if (!tryAcquire(arg) &amp;&amp;
         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
         selfInterrupt();
}
</code></pre>
<p>先调用tryAcquire（自实现）去获取，失败后加入队列，我们再看addWaiter方法：</p>
<pre><code class="language-java">private Node addWaiter(Node mode) {
    //以给定模式构造结点。mode有两种：EXCLUSIVE（独占）和SHARED（共享）
    Node node = new Node(Thread.currentThread(), mode);
    
    //尝试快速方式直接放到队尾。
    Node pred = tail;
    if (pred != null) {
        node.prev = pred;
        if (compareAndSetTail(pred, node)) {
            pred.next = node;
            return node;
        }
    }
    
    //上一步失败则通过enq入队。
    enq(node);
    return node;
}
</code></pre>
<p>enq就不贴了，自旋添加入队，重点关注acquireQueue（）；通过tryAcquire()和addWaiter()，该线程获取资源失败，已经被放入等待队列尾部了。聪明的你立刻应该能想到该线程下一部该干什么了吧：<strong>进入等待状态休息，直到其他线程彻底释放资源后唤醒自己，自己再拿到资源，然后就可以去干自己想干的事了</strong>。没错，就是这样！是不是跟医院排队拿号有点相似~~acquireQueued()就是干这件事：<strong>在等待队列中排队拿号（中间没其它事干可以休息），直到拿到号后再返回</strong>。</p>
<pre><code class="language-java">final boolean acquireQueued(final Node node, int arg) {
    boolean failed = true;//标记是否成功拿到资源
    try {
        boolean interrupted = false;//标记等待过程中是否被中断过
        
        //又是一个“自旋”！
        for (;;) {
            final Node p = node.predecessor();//拿到前驱
            //如果前驱是head，即该结点已成老二，那么便有资格去尝试获取资源（可能是老大释放完资源唤醒自己的，当然也可能被interrupt了）。
            if (p == head &amp;&amp; tryAcquire(arg)) {
                setHead(node);//拿到资源后，将head指向该结点。所以head所指的标杆结点，就是当前获取到资源的那个结点或null。
                p.next = null; // setHead中node.prev已置为null，此处再将head.next置为null，就是为了方便GC回收以前的head结点。也就意味着之前拿完资源的结点出队了！
                failed = false; // 成功获取资源
                return interrupted;//返回等待过程中是否被中断过
            }
            
            //如果自己可以休息了，就通过park()进入waiting状态，直到被unpark()。如果不可中断的情况下被中断了，那么会从park()中醒过来，发现拿不到资源，从而继续进入park()等待。
            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                parkAndCheckInterrupt())
                interrupted = true;//如果等待过程中被中断过，哪怕只有那么一次，就将interrupted标记为true
        }
    } finally {
        if (failed) // 如果等待过程中没有成功获取资源（如timeout，或者可中断的情况下被中断了），那么取消结点在队列中的等待。
            cancelAcquire(node);
    }
}
</code></pre>
<p>这里面有两个值得关注的方法，一个是shouldParkAfterFailedAcquire()，另一个是parkAndCheckInterrupt()：</p>
<p>前者是用来检测自己是否真的可以去休息了，也就是进入线程的waiting状态，只是一个检查；后者是去休息；</p>
<pre><code class="language-java">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
    int ws = pred.waitStatus;//拿到前驱的状态
    if (ws == Node.SIGNAL)
        //如果已经告诉前驱拿完号后通知自己一下，那就可以安心休息了
        return true;
    if (ws &gt; 0) {
        /*
         * 如果前驱放弃了，那就一直往前找，直到找到最近一个正常等待的状态，并排在它的后边。
         * 注意：那些放弃的结点，由于被自己“加塞”到它们前边，它们相当于形成一个无引用链，稍后就会被保安大叔赶走了(GC回收)！
         */
        do {
            node.prev = pred = pred.prev;
        } while (pred.waitStatus &gt; 0);
        pred.next = node;
    } else {
         //如果前驱正常，那就把前驱的状态设置成SIGNAL，告诉它拿完号后通知自己一下。有可能失败，人家说不定刚刚释放完呢！
        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
    }
    return false;
}


private final boolean parkAndCheckInterrupt() {
    LockSupport.park(this);//调用park()使线程进入waiting状态
    return Thread.interrupted();//如果被唤醒，查看自己是不是被中断的。
}
</code></pre>
<p>总结下它的流程吧：</p>
<ol>
<li>调用自定义同步器的tryAcquire()尝试直接去获取资源，如果成功则直接返回；</li>
<li>没成功，则addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；</li>
<li>acquireQueued()使线程在等待队列中休息，有机会时（轮到自己，会被unpark()）会去尝试获取资源。获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。</li>
<li>如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://images2015.cnblogs.com/blog/721070/201511/721070-20151102145743461-623794326.png" alt="img"></figure>
<p><strong>参考原文：<a href="https://www.cnblogs.com/waterystone/p/4920797.html">Java并发之AQS详解</a></strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初探AQS]]></title>
        <id>https://KriseWang.github.io/post/chu-tan-aqs</id>
        <link href="https://KriseWang.github.io/post/chu-tan-aqs">
        </link>
        <updated>2020-01-14T13:29:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-aqs简述">一、AQS简述</h2>
<p>​		AQS是AbustactQueuedSynchronizer的简称，它是一个Java提高的底层同步工具类，用一个<strong>int类型的变量表示同步状态</strong>，并提供了一系列的CAS操作来管理这个同步状态。AQS的主要作用是为Java中的并发同步组件提供统一的底层支持，例如ReentrantLock，CountdowLatch就是基于AQS实现的，用法是通过继承AQS实现其模版方法，然后将子类作为同步组件的内部类。AQS在功能上分为两类：独占功能和共享功能。先贴一个自实现的锁。</p>
<pre><code class="language-java">public class SelfLock implements Lock{
	
	//state 表示获取到锁 state=1 获取到了锁，state=0，表示这个锁当前没有线程拿到
	private static class Sync extends AbstractQueuedSynchronizer{
		
		//是否占用
		protected boolean isHeldExclusively() {
			return getState()==1;
		}
        
		//获取
		protected boolean tryAcquire(int arg) {
			if(compareAndSetState(0,1)) {
                //设置拿到排他锁的线程是当前的线程
				setExclusiveOwnerThread(Thread.currentThread());
				return true;
			}
			return false;
		}
		
        //释放，此时该线程持有锁，所以不需要cas操作
		protected boolean tryRelease(int arg) {
			if(getState()==0) {
				throw new UnsupportedOperationException();
			}
			setExclusiveOwnerThread(null);
			setState(0);
			return true;
		}
		
		Condition newCondition() {
			return new ConditionObject();
		}
	}
	
	private final Sync sycn = new Sync();

	@Override
	public void lock() {
		sycn.acquire(1);
		
	}

	@Override
	public void lockInterruptibly() throws InterruptedException {
		sycn.acquireInterruptibly(1);
		
	}

	@Override
	public boolean tryLock() {
		return sycn.tryAcquire(1);
	}

	@Override
	public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
		return sycn.tryAcquireNanos(1, unit.toNanos(time));
	}

	@Override
	public void unlock() {
		sycn.release(1);
		
	}

	@Override
	public Condition newCondition() {
		return sycn.newCondition();
	}


}

</code></pre>
<p>然后我们来简单分析：</p>
<h2 id="二-aqs内部的方法">二、AQS内部的方法</h2>
<p>​		AQS使用的是模板模式，内部提供了很多模板方法。</p>
<h3 id="1-aqs模板方法">1、AQS模板方法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">方法名称</th>
<th style="text-align:center">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">void acquire(int arg)</td>
<td style="text-align:center">模板方法，独占式获取同步状态，如果当前线程获取同步状态成功，则由该方法返回，否则会进入同步队列等待，此方法会调用子类重写的tryAcquire方法</td>
</tr>
<tr>
<td style="text-align:left">void acquireInterruptibly(int arg)</td>
<td style="text-align:center">模板方法，与acquire相同，但是此方法可以响应中断，当前线程未获取到同步状态而进入同步队列中，如果当前线程被中断，此方法会抛出InterruptedException并返回</td>
</tr>
<tr>
<td style="text-align:left">boolean tryAcquireNanos(int arg, long nanosTimeout)</td>
<td style="text-align:center">模板方法，在acquireInterruptibly基础上增加了超时限制，如果当前线程在超时时间内没有获取到同步状态，则会返回false,如果获取到了则会返回true</td>
</tr>
<tr>
<td style="text-align:left">boolean release(int arg)</td>
<td style="text-align:center">模板方法，独占式的释放同步状态，该方法会在释放同步状态后，将同步队列中的第一个节点包含的线程唤醒</td>
</tr>
<tr>
<td style="text-align:left">void acquireShared(int arg)</td>
<td style="text-align:center">模板方法，共享式的获取同步状态，如果当前系统未获取到同步状态，将会进入同步队列等待，与acquire的主要区别在于同一时刻可以有多个线程获取到同步状态</td>
</tr>
<tr>
<td style="text-align:left">void acquireSharedInterruptibly(int arg)</td>
<td style="text-align:center">模板方法，与acquireShared一致，但是可以响应中断</td>
</tr>
<tr>
<td style="text-align:left">boolean tryAcquireSharedNanos(int arg, long nanosTimeout)</td>
<td style="text-align:center">模板方法，在acquireSharedInterruptibly基础上增加了超时限制</td>
</tr>
<tr>
<td style="text-align:left">boolean releaseShared(int arg)</td>
<td style="text-align:center">模板方法，共享式的释放同步状态</td>
</tr>
</tbody>
</table>
<p>以	”void acquire(int arg)“	为例：</p>
<pre><code class="language-java">public final void acquire(int arg) {
    	//子类实现
        if (!tryAcquire(arg) &amp;&amp;
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
</code></pre>
<h3 id="2-aqs自实现方法">2、AQS自实现方法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">方法名称</th>
<th style="text-align:center">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">protected boolean tryAcquire(int arg)</td>
<td style="text-align:center">独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后通过CAS设置同步状态</td>
</tr>
<tr>
<td style="text-align:left">protected boolean tryRelease(int arg)</td>
<td style="text-align:center">独占式释放同步状态，等待获取同步状态的线程将有机会获取同步状态</td>
</tr>
<tr>
<td style="text-align:left">protected int tryAcquireShared(int arg)</td>
<td style="text-align:center">共享式获取独占状态，返回大于等于0的值，表示获取成功，反之获取失败</td>
</tr>
<tr>
<td style="text-align:left">protected boolean  tryReleaseShared(int arg)</td>
<td style="text-align:center">共享式释放同步状态</td>
</tr>
<tr>
<td style="text-align:left">protected boolean isHeldExclusively()</td>
<td style="text-align:center">当前同步器是否在独占模式下线程占用，一般该方法是否被当前线程所独占</td>
</tr>
</tbody>
</table>
<p>以上都是很基础的东西，在AQS里面注释也有对应的讲解和例子，下面我们开始进入正题：</p>
<h2 id="三-节点和同步队列">三、节点和同步队列</h2>
<p>我们先看Node的代码：</p>
<pre><code class="language-java">static final class Node {
        /** 表示节点在共享模式下 */
        static final Node SHARED = new Node();
        /** 表示节点在独占模式下 */
        static final Node EXCLUSIVE = null;

        /** 当线程等待超时或者被中断，则取消等待，设等待状态为-1，进入取消状态则不再变化 */
        static final int CANCELLED =  1;
        /** 后继节点处于等待状态，当前节点（为-1）被取消或者中断时会通知后继节点，使后继节点的线程得以运			行 */
        static final int SIGNAL    = -1;
        /** 当前节点处于等待队列，节点线程等待在Condition上，当其他线程对condition执行signall方法			时，等待队列转移到同步队列，加入到对同步状态的获取 */
        static final int CONDITION = -2;
        /**
         * 与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态
         */
        static final int PROPAGATE = -3;

        /**
         * 标识状态
         */
        volatile int waitStatus;

        /**前驱节点，在出队时将其清空（GC）。在清空一个前驱节点，我们会短路的同时寻找一个未取消的节点，这			个节点总是存在因为头节点从未被取消。只有成功获取节点的结果，节点才会成为头部。 取消的线程永远不会		  成功获取，并且线程只会取消自身，不会取消任何其他节点。
         */
        volatile Node prev;

        /**后继节点，在当前节点释放时将其唤醒。在入队期间指定位置，在绕行取消状态的前驱节点时调整位置，
        并且在出队时取消（GC）。enq操作添加空节点时，附加后才分配前驱节点的next（所以next = null 不代   	  表就是最后一个节点）。所以如果下一个节点首次显现为空，我们可以从尾部开始往前驱扫描来进行再次检查。 
         */
        volatile Node next;

        /**
      	 *获取同步状态的线程。
         */
        volatile Thread thread;

        /**
          Node既可以作为同步队列节点使用，也可以作为Condition的等待队列节点使用。在作为同步队列节点时，			 nextWaiter可能有两个值：EXCLUSIVE、SHARED标识当前节点是独占模式还是共享模式；在作为等待		      队列节点使用时，nextWaiter保存后继节点。
         */
        Node nextWaiter;

        /**
         * 如果节点是共享模式则返回true
         */
        final boolean isShared() {
            return nextWaiter == SHARED;
        }

        /**返回前驱节点，或者抛出空指针异常。当使用在前驱节点不可能为空的情况，空检查可能被忽略但可以帮助			虚拟机
         */
        final Node predecessor() throws NullPointerException {
            Node p = prev;
            if (p == null)
                throw new NullPointerException();
            else
                return p;
        }

        Node() {    // 用于建立初始标头或SHARED标记
        }

        Node(Thread thread, Node mode) {     // Used by addWaiter
            this.nextWaiter = mode;
            this.thread = thread;
        }

        Node(Thread thread, int waitStatus) { // Used by Condition
            this.waitStatus = waitStatus;
            this.thread = thread;
        }
    }
</code></pre>
<p><strong>同步队列</strong>是AQS很重要的组成部分，它是一个双端队列（其实就是数据结构双向链表），遵循FIFO原则，主要作用是用来存放在锁上阻塞的线程，当一个线程尝试获取锁时，如果已经被占用，那么当前线程就会被构造成一个Node节点加入到同步队列的尾部，队列的头节点是成功获取锁的节点，当头节点线程获得锁时，会唤醒后面的节点并释放当前头节点的引用。</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/2019032820194244.png" alt="img"></figure>
<ul>
<li>
<p>同步队列设置尾节点（未获取到锁的线程加入同步队列）:</p>
<p>同步器AQS中包含两个节点类型的引用：一个指向头结点的引用（head),一个指向尾节点的引用（tail），当一个线程成功的获取到锁（同步状态），其他线程无法获取到锁，而是被构造成节点（包含当前线程，等待状态）加入到同步队列中等待获取到锁的线程释放锁。</p>
<p>这个加入队列的过程，必须要保证线程安全。否则如果多个线程的环境下，可能造成添加到队列等待的节点顺序错误，或者数量不对。因此同步器提供了CAS原子的设置尾节点的方法（保证一个未获取到同步状态的线程加入到同步队列后，下一个未获取的线程才能够加入）。</p>
<p>如下图，设置尾节点：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20190328202009404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt="img"></figure>
</li>
<li>
<p>同步队列设置首节点（原头节点释放锁，唤醒后继节点）：</p>
</li>
</ul>
<p>同步队列遵循FIFO，头节点是获取锁（同步状态）成功的节点，头节点在释放同步状态的时候，会唤醒后继节点，而后继节点将会在获取锁（同步状态）成功时候将自己设置为头节点。设置头节点是由获取锁（同步状态）成功的线程来完成的，由于只有一个线程能够获取同步状态，则设置头节点的方法不需要CAS保证，只需要将头节点设置成为原首节点的后继节点 ，并断开原头结点的next引用。如下图，设置首节点：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/2019032820203840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt="img"></figure>
<h2 id="四-独占式锁的获取">四、独占式锁的获取</h2>
<p>调用同步器的acquire(int arg)方法可以获取同步状态，<strong>该方法对中断不敏感</strong>，即线程获取同步状态失败后进入同步队列，后续对线程进行<strong>中断操作</strong>时，线程不会从同步队列中移除。</p>
<p>​    (1) 当前线程实现通过tryAcquire()方法尝试获取锁，获取成功的话直接返回，如果尝试失败的话，进入同步队列排队，可以保证线程安全（CAS）的获取同步状态。</p>
<p>​    (2) 如果尝试获取锁失败的话，构造同步节点（独占式的Node.EXCLUSIVE），通过addWaiter(Node node,int args)方法,将节点加入到同步队列的队列尾部。</p>
<p>​    (3) 最后调用acquireQueued(final Node node, int args)方法，使该节点以死循环的方式获取同步状态，如果获取不到，则阻塞节点中的线程。acquireQueued方法当前线程在死循环中获取同步状态，而只有前驱节点是头节点的时候才能尝试获取锁（同步状态）（ p == head &amp;&amp; tryAcquire(arg)）。</p>
<p>原因是：</p>
<ol>
<li>头结点是成功获取同步状态的节点，而头结点的线程释放锁以后，将唤醒后继节点，后继节点线程被唤醒后要检查自己的前驱节点是否为头结点。</li>
<li>维护同步队列的FIFO原则，节点进入同步队列以后，就进入了一个自旋的过程，每个节点（后者说每个线程）都在自省的观察。</li>
</ol>
<p>下图为节点自旋检查自己的前驱节点是否为头结点：</p>
<figure data-type="image" tabindex="4"><img src="https://img-blog.csdnimg.cn/20190328202625704.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt="img"></figure>
<h3 id="1-独占式获取源码">1、独占式获取源码</h3>
<pre><code class="language-java">	/**   
     *  独占式的获取同步状态           
     */
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
</code></pre>
<p><strong>尝试获取锁：tryAcquire方法：如果获取到了锁，*<em>tryAcquire返回true，反之，返回false。*</em></strong></p>
<pre><code class="language-java">//方法2：
    protected final boolean tryAcquire(int acquires) {
        // 获取当前线程
        final Thread current = Thread.currentThread();
        // 获取“独占锁”的状态，获取父类AQS的标志位
        int c = getState();
        //c == 0 意思是锁（同步状态）没有被任何线程所获取
        //1.当前线程是否是同步队列中头结点Node,如果是的话，则获取该锁，设置锁的状态，并设置锁的拥有者为		当前线程
        if (c == 0) {
            if (!hasQueuedPredecessors() &amp;&amp;
               // 修改下状态为，这里的acquires的值是1，是写死的调用子类的lock的方法的时候
               // 传进来的，如果c == 0，compareAndSetState操作会更新成功为1.
                compareAndSetState(0, acquires)) {
                // 上面CAS操作更新成功为1，表示当前线程获取到了锁，因为将当前线程设置为
                // AQS的一个变量中，代表这个线程拿走了锁。
                setExclusiveOwnerThread(current);
                return true;
            }
        }
        //2.如果c不为0，即状态不为0，表示锁已经被拿走。
        //因为ReetrantLock是可重入锁，是可以重复lock和unlock的，所以这里还要判断一次，
        //获取锁的线程是否为当前请求锁的线程。
        else if (current == getExclusiveOwnerThread()) {
        //如果是，state继续加1，这里nextc的结果就会 &gt; 1,这个判断表示获取到的锁的线程，
            //还可以再获取锁，这里就是说的可重入的意思
            int nextc = c + acquires;
            if (nextc &lt; 0)
                throw new Error(&quot;Maximum lock count exceeded&quot;);
            setState(nextc);
            return true;
        }
        return false;
    }
</code></pre>
<p>**addWaiter方法的源码：回到aquire方法，**如果尝试获取同步状态（锁）失败的话,则构造同步节点（独占式的Node.EXCLUSIVE），通过addWaiter(Node node,int args)方法将该节点加入到同步队列的队尾。</p>
<pre><code class="language-java">/**
    * Creates and enqueues node for current thread and given mode.
    * 如果尝试获取同步状态失败的话,则构造同步节点（独占式的Node.EXCLUSIVE），
    * 通过addWaiter(Node node,int args)方法将该节点加入到同步队列的队尾。
    * 
    */
    private Node addWaiter(Node mode) {
        // 用当前线程构造一个Node对象，mode是一个表示Node类型的字段，
        // 或者说是这个节点是独占的还是共享的，或者说AQS的这个队列中，
        // 哪些节点是独占的，哪些节点是共享的。
        Node node = new Node(Thread.currentThread(), mode);
        // Try the fast path of enq; backup to full enq on failure
        Node pred = tail;
        //队列不为空的时候
        if (pred != null) {
            node.prev = pred;
            // 确保节点能够被线程安全的添加，使用CAS方法
            // 尝试修改为节点为最新的节点，如果修改失败，意味着有并发，
            // 这个时候进入enq中的死循环，进行“自旋”的方式修改
            if (compareAndSetTail(pred, node)) {
                pred.next = node;
                return node;
            }
        }
        //进入自旋
        enq(node);
        return node;
    }
</code></pre>
<p><strong>enq方法的源码：同步器通过死循环的方式来保证节点的正确添加，在“死循环” 中通过CAS将节点设置成为尾节点之后，当前线程才能从该方法中返回，否则当前线程不断的尝试设置。enq方法将并发添加节点的请求通过CAS变得“串行化”了。</strong></p>
<pre><code class="language-java">    private Node enq(final Node node) {
        for (;;) {
            Node t = tail;
            if (t == null) { // Must initialize
                if (compareAndSetHead(new Node()))
                    tail = head;
            } else {
                node.prev = t;
                if (compareAndSetTail(t, node)) {
                    t.next = node;
                    return t;
                }
            }
        }
    }
</code></pre>
<p><strong>acquireQueued方法:在队列中的线程获取锁的过程：</strong></p>
<pre><code class="language-java">/**
    * acquireQueued方法当前线程在死循环中获取同步状态，而只有前驱节点是头节点才能尝试获取
      同步状态（锁）（ p == head &amp;&amp; tryAcquire(arg)）
    *原因是:1.头结点是成功获取同步状态（锁）的节点，而头节点的线程释放了同步状态以后，
              将会唤醒其后继节点，后继节点的线程被唤醒后要检查自己的前驱节点是否为头结点。
    *      2.维护同步队列的FIFO原则，节点进入同步队列之后，就进入了一个自旋的过程，
              每个节点（或者说是每个线程）都在自省的观察。 
    */
    final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            //死循环检查（自旋检查）当前节点的前驱节点是否为头结点，才能获取锁
            for (;;) {
                // 获取节点的前驱节点
                final Node p = node.predecessor();
                if (p == head &amp;&amp; tryAcquire(arg)) {//节点中的线程循环的检查，自己的前驱节点是否为头节点
                    //将当前节点设置为头结点，移除之前的头节点
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                // 检查前一个节点的状态，看当前获取锁失败的线程是否要挂起
                if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                    //如果需要挂起，借助JUC包下面的LockSupport类的静态方法park挂起当前线程，直到被唤醒
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            //如果有异常
            if (failed)
                //取消请求，将当前节点从队列中移除
                cancelAcquire(node);
        }
    }
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://img-blog.csdnimg.cn/20190328210323212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ppblhZYW4=,size_16,color_FFFFFF,t_70" alt="img"></figure>
<h3 id="2-独占锁释放源码">2、独占锁释放源码</h3>
<pre><code class="language-java">/* 
  1. unlock():unlock()是解锁函数，它是通过AQS的release()函数来实现的。
 * 在这里，“1”的含义和“获取锁的函数acquire(1)的含义”一样，它是设置“释放锁的状态”的参数。
 * 由于“公平锁”是可重入的，所以对于同一个线程，每释放锁一次，锁的状态-1。
    unlock()在ReentrantLock.java中实现的，源码如下：
 */
    public void unlock() {
        sync.release(1);
    }
</code></pre>
<p>release()会调用tryRelease方法尝试释放当前线程持有的锁（同步状态），成功的话唤醒后继线程，并返回true，否则直接返回false。</p>
<pre><code class="language-java">    public final boolean release(int arg) {
        if (tryRelease(arg)) {
            Node h = head;
            if (h != null &amp;&amp; h.waitStatus != 0)
                unparkSuccessor(h);
            return true;
        }
        return false;
    }
// tryRelease() 尝试释放当前线程的同步状态（锁）
  protected final boolean tryRelease(int releases) {
            //c为释放后的同步状态
          int c = getState() - releases;
          //判断当前释放锁的线程是否为获取到锁（同步状态）的线程，不是抛出异常（非法监视器状态异常）
          if (Thread.currentThread() != getExclusiveOwnerThread())
              throw new IllegalMonitorStateException();
          boolean free = false;
          //如果锁（同步状态）已经被当前线程彻底释放，则设置锁的持有者为null，同步状态（锁）变的可获取
          if (c == 0) {
              free = true;
              setExclusiveOwnerThread(null);
          }
          setState(c);
          return free;
</code></pre>
<p>释放锁成功后，找到AQS的头结点，并唤醒它即可：</p>
<pre><code class="language-java">// 4. 唤醒头结点的后继节点
     private void unparkSuccessor(Node node) {
         //获取头结点（线程）的状态
        int ws = node.waitStatus;
        //如果状态&lt;0,设置当前线程对应的锁的状态为0
        if (ws &lt; 0)
            compareAndSetWaitStatus(node, ws, 0);
        Node s = node.next;
         //解释:Thread to unpark is held in successor, which is normally just the next node. 
         //But if cancelled or apparently（显然） null, traverse backwards(向后遍历) from tail to find the actual（实际的） non-cancelled successor（前继节点）.
         //从队列尾部开始往前去找最前面的一个waitStatus小于0的节点。
        if (s == null || s.waitStatus &gt; 0) {
            s = null;
            for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)
                if (t.waitStatus &lt;= 0)
                    s = t;
        }
        //唤醒后继节点对应的线程
        if (s != null)
            LockSupport.unpark(s.thread);
    }
</code></pre>
<p>上面说的是ReentrantLock的公平锁获取和释放的AQS的源码，唯独还剩下一个非公平锁NonfairSync没说，其实，它和公平锁的唯一区别就是获取锁的方式不同，公平锁是按前后顺序一次获取锁，非公平锁是抢占式的获取锁，那ReentrantLock中的非公平锁NonfairSync是怎么实现的呢？</p>
<pre><code class="language-java">/**
     * Sync object for non-fair locks
     */
    static final class NonfairSync extends Sync {
        private static final long serialVersionUID = 7316153563782823691L;
        /**
         * Performs lock.  Try immediate barge, backing up to normal
         * acquire on failure.
         */
        final void lock() {
            if (compareAndSetState(0, 1))
                setExclusiveOwnerThread(Thread.currentThread());
            else
                acquire(1);
        }
        protected final boolean tryAcquire(int acquires) {
            return nonfairTryAcquire(acquires);
        }
    }
</code></pre>
<p>​    公平锁会先进行！hasQueuedPredecessors（）判断，为true时在进行CAS操作。而非公平锁的lock先直接用cas判断state变量是否为0（尝试获取锁），成功的话更新成1，表示当前线程获取到了锁，不需要在排队，从而直接抢占的目的。而对于公平锁的lock方法是一开始就走AQS的双向队列排队获取锁。（简单来讲就是冲冲冲）</p>
<p>​    <strong>非公平锁的效率比公平锁的效率高。因为公平锁的线程切换次数大于非公平锁（释放后在获取的几率高），会造成额外的开销。但是非公平会造成线程饥饿的问题。</strong></p>
<p>​     <strong>总结:在获取同步状态的时候，同步器维护一个同步队列，获取失败的线程会被加入到队列中并在队列中自旋;移除队列（或停止自旋）的条件是前驱节点为头结点并且获取到了同步状态。在释放同步状态时，同步器调用tryRelease(int args)方法释放同步状态，然后唤醒头结点的后继节点。AQS的实现思路其实并不复杂，用一句话准确的描述的话，其实就是使用标志状态位status（volatile int state）和 一个双向队列的入队和出队来实现。AQS维护一个线程何时访问的状态，它只是对状态负责，而这个状态的含义，子类可以自己去定义。</strong><br>
** 参考：《Java并发编程的艺术》 **</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java-高效的开发技巧]]></title>
        <id>https://KriseWang.github.io/post/java-gao-xiao-de-kai-fa-ji-qiao</id>
        <link href="https://KriseWang.github.io/post/java-gao-xiao-de-kai-fa-ji-qiao">
        </link>
        <updated>2019-12-25T00:46:55.000Z</updated>
        <content type="html"><![CDATA[<p>引用阿里中间件公众号的文章，记录一下：</p>
<p>https://mp.weixin.qq.com/s?__biz=MzU4NzU0MDIzOQ==&amp;mid=2247488458&amp;idx=5&amp;sn=c1812a41adf66c5f028ac97076f5432f&amp;chksm=fdeb21aaca9ca8bc53af2355461d6fef8d3fe8a20322576069723c227f16b1a9c0943352b164&amp;mpshare=1&amp;scene=23&amp;srcid=1216JzR6p6lh3i0nI2ih0R0P&amp;sharer_sharetime=1576470828987&amp;sharer_shareid=6ad51e190478d1ec7d1f68fbacf06b1b#rd</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java8新特性小结]]></title>
        <id>https://KriseWang.github.io/post/java8-xin-te-xing-xiao-jie</id>
        <link href="https://KriseWang.github.io/post/java8-xin-te-xing-xiao-jie">
        </link>
        <updated>2019-12-18T14:03:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1lambda表达式相关使用">1.Lambda表达式相关使用</h2>
<h3 id="1-语法格式">1、语法格式</h3>
<pre><code class="language-java">//匿名内部类
Runnable r1 = new Runnable(){
    @Override
    public void run(){
        System.out.println(&quot;666&quot;);
    }
}

//Lambda表达式
Runnable r2 () -&gt; System.out.println(&quot;666&quot;);

/*
	语法格式：
	1、无参，无返回值（如上）
	2、需要一个参数，但没有返回值（Consumer&lt;T t&gt;：消费型接口）
	3、数据类型可以省略，“类型推断”机制
		e.g. Consumer&lt;String&gt; com = System.out::println;
	4、Lambda弱只需要一个参数时，参数的小括号可以省略（如上）
	5、Lambda需要两个或以上的参数，多条执行语句，并且可以有返回值
	6、当Lambda体内只有一条语句时，return与大括号若有，都可以省略
*/

// e.g.5
	Comparator&lt;Integer&gt; com =(a,b) -&gt; {
        System.out::println(&quot;666&quot;);
        return Integer.compare(a,b);
    }

//e.g.6
	Comparator&lt;Integer&gt; com =(a,b) -&gt; Integer.compare(a,b);
</code></pre>
<h3 id="2-类型推断">2、类型推断</h3>
<p>​		Lambda表达式的类型依赖于上下文环境，是由编译器推断出的。</p>
<h2 id="2-函数式接口">2、函数式接口</h2>
<h3 id="1-定义">1、定义</h3>
<ul>
<li>只包含一个抽象方法的接口。</li>
<li>可以通过Lambda表达式来创建该接口的对象。 （若Lambda表达式抛出一个受检异常（非运行时异常），那么该异常需要在目标接口的抽象方法上进行声明）。</li>
<li>@FunctionalInterface注解</li>
</ul>
<h3 id="2-java内置核心函数式接口">2、Java内置核心函数式接口</h3>
<table>
<thead>
<tr>
<th>函数式接口</th>
<th>参数类型</th>
<th>返回类型</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Consumer<T><br/>消费型接口</td>
<td>T</td>
<td>void</td>
<td style="text-align:center">对类型为T的对象应用操作，包含方法：void accept(T t)</td>
</tr>
<tr>
<td>Supplier<T><br/>供给型接口</td>
<td>无</td>
<td>T</td>
<td style="text-align:center">返回类型为T的对象，包含方法：T get()</td>
</tr>
<tr>
<td>Function&lt;T, R&gt;<br/>函数型接口</td>
<td>T</td>
<td>R</td>
<td style="text-align:center">对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td>
</tr>
<tr>
<td>Predicate<T><br/>断定型接口</td>
<td>T</td>
<td>Boolean</td>
<td style="text-align:center">确定类型为T的对象是否满足某约束，并返回Boolean值。包含方法：Boolean test(T t)</td>
</tr>
<tr>
<td>BiFunction&lt;T,U,R&gt;</td>
<td>T,U</td>
<td>R</td>
<td style="text-align:center">对类型为T，U参数应用操作，返回R类型的结果。包含方法：R apply(T t,U u)</td>
</tr>
<tr>
<td>UnaryOperator<T><br/>（Function子接口）</td>
<td>T</td>
<td>T</td>
<td style="text-align:center">对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为：T apply(T t)</td>
</tr>
<tr>
<td>BinaryOperator<T><br/>（BiFunction子接口）</td>
<td>T，T</td>
<td>T</td>
<td style="text-align:center">对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为：T apply(T t1,T t2)</td>
</tr>
<tr>
<td>BiConsumer&lt;T,U&gt;</td>
<td>T,U</td>
<td>void</td>
<td style="text-align:center">对类型为T，U参数应用操作。包含方法为：void accept(T t,U u)</td>
</tr>
<tr>
<td>BiPredicate&lt;T,U&gt;</td>
<td>T,U</td>
<td>Boolean</td>
<td style="text-align:center">包含方法为：boolean test(T t,U u)</td>
</tr>
<tr>
<td>ToIntFunction<T><br/>ToLongFunction<T><br/>ToDoubleFunction<T></td>
<td>T</td>
<td>int<br/>long<br/>double</td>
<td style="text-align:center">分别计算int，long，double值的函数</td>
</tr>
<tr>
<td>IntFunction<T><br/>LongFunction<T><br/>DoubleFunction<T></td>
<td>int，long，double</td>
<td>T</td>
<td style="text-align:center">参数分别为int，long，double类型的函数</td>
</tr>
</tbody>
</table>
<h2 id="3-方法引用和构造器引用">3、方法引用和构造器引用</h2>
<h3 id="1-关于">1、关于</h3>
<pre><code>+ 当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用。
+ 方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。
+ 要求：实现接口的抽象方法的参数列表和返回值类型必须与方法引用的方法的参数列表和返回值类型保持一致。
+ 格式：使用操作符“::”
+ 主要是用情况
</code></pre>
<ul>
<li>
<ul>
<li>对象::实例方法名</li>
<li>类::静态方法名</li>
<li>类::实例方法名</li>
</ul>
</li>
</ul>
<pre><code class="language-java">Consumer&lt;String&gt; com = x -&gt; System.out.println(x);
//等于
Consumer&lt;String&gt; com = System.out::println;

Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);
//等于
Comparator&lt;Integer&gt; com = Integer::compare;

BiPredicate&lt;String,String&gt; bp = (x,y) -&gt; x.equals(y);
//等于
BiPredicate&lt;String,String&gt; bp = String::equals;
boolean flag = bp.test(&quot;asd&quot;,&quot;asd&quot;);
</code></pre>
<h3 id="2-注">2、注</h3>
<p>​	当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数（或无参数）时：ClassName::MethodName</p>
<h3 id="3-构造器引用">3、构造器引用</h3>
<pre><code>格式：ClassName::new（要求构造器参数列表要与接口中抽象方法的参数列表保持一致，且方法的返回值即为构造器对应类的对象）
</code></pre>
<pre><code class="language-java">Function&lt;Integer,MyClass&gt; fun = n -&gt; new MyClass(n);
//等于
Function&lt;Integer,MyClass&gt; fun = MyClass::new;
</code></pre>
<h3 id="4-数组引用">4、数组引用</h3>
<p>​	 格式：type[]::new</p>
<pre><code class="language-java">Function&lt;Integer,Integer[]&gt; ff = n -&gt;new Integer[n];
//等于
Function&lt;Integer,Integer[]&gt; ff = Integer[]::new;
</code></pre>
<h2 id="4-stream">4、Stream</h2>
<h3 id="1-特点">1、特点：</h3>
<ul>
<li>使用Stream对集合数据进行操作，就类似于使用SQL执行的数据库查询。</li>
<li>对于NoSQL的数据需要java层面进行处理。</li>
<li>Stream和Collection集合的区别：Collection是一种静态的内存数据结构，而Stream是有关计算的。前者主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU实现计算。</li>
<li>
<ul>
<li>Stream自己不会存储元素。</li>
<li>Stream不会改变源对象，相反，他们会返回一个 持有结果的新Stream</li>
<li>Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li>
</ul>
</li>
<li>三个执行步骤：</li>
<li>
<ul>
<li>1、创建Stream：一个数据源（集合、数组），获取一个流</li>
<li>2、中间操作：一个中间操作链，对数据源的数据进行处理</li>
<li>3、终止操作：一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</li>
</ul>
</li>
</ul>
<h3 id="2-创建stream方式">2、创建Stream方式</h3>
<pre><code>#### 1、通过集合
</code></pre>
<ul>
<li>default Stream<E> stream(): 返回一个顺序流</li>
<li>default Stream<E> parallelStream():返回一个并行流</li>
</ul>
<h4 id="2-通过数组">2、通过数组</h4>
<p>​			通过Arrays的静态方法stream()</p>
<ul>
<li>static <T> Stream<T> stream(T[] array):返回一个流</li>
<li>IntStream、LongStream、DoubleStream</li>
</ul>
<h4 id="3-通过stream的of">3、通过Stream的of()</h4>
<ul>
<li>public static<T> Stream<T> of (T... values):返回一个流</li>
</ul>
<h4 id="4-创建无限流">4、创建无限流</h4>
<p>​			Stream.iterate()和Stream.generate()（前者迭代，后者生成）</p>
<ul>
<li>public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)</li>
<li>public static<T> Stream<T> generate(Supplier<T> s)</li>
</ul>
<pre><code class="language-java">//迭代创建
Stream&lt;Integer&gt; stream = Stream.itreate(0,x -&gt; x+2);
stream.forEach(System.out::println);

//生成创建
Stream&lt;Double&gt; stream = Stream.generate(Math::random);
stream.forEach(System.out::println);
</code></pre>
<h3 id="3-stream的中间操作">3、Stream的中间操作</h3>
<h4 id="1-关于-2">1、关于</h4>
<p>​		多个中间操作可以连接起来形成一条流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</p>
<h4 id="2-筛选与切片">2、筛选与切片</h4>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">filter(Predicate p)</td>
<td>接受Lambda，从流中排除某些元素</td>
</tr>
<tr>
<td style="text-align:center">distinct()</td>
<td>筛选，通过流所生成的元素的hashcode()和equals()去除重复元素</td>
</tr>
<tr>
<td style="text-align:center">limit(long maxSize)</td>
<td>截断流，使其元素不超过给定数量</td>
</tr>
<tr>
<td style="text-align:center">skip(long n)</td>
<td>跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</td>
</tr>
</tbody>
</table>
<h4 id="3-映射">3、映射</h4>
<p>​		按照某种关系将流内元素映射， 参考： f(x) = y</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>map(Function f)</td>
<td>接受一个函数作为参数，这个函数会被应用到每一个元素上，并将其映射成一个新的元素。</td>
</tr>
<tr>
<td>flatMap(Function f)</td>
<td>接受一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</td>
</tr>
<tr>
<td>mapToDouble(ToDoubleFunction f)</td>
<td>接受一个函数作为参数，这个函数会被应用到每一个元素上，并将其映射成一个新的DoubleStream。</td>
</tr>
<tr>
<td>mapToInt(ToIntFunction f)</td>
<td>接受一个函数作为参数，这个函数会被应用到每一个元素上，并将其映射成一个新的IntStream。</td>
</tr>
<tr>
<td>mapToLong(ToLongFunction f)</td>
<td>接受一个函数作为参数，这个函数会被应用到每一个元素上，并将其映射成一个新的LongStream。</td>
</tr>
</tbody>
</table>
<p>​		注：针对map()和flatMap(),可以参考list的add()和addAll()的区别。</p>
<h4 id="4-排序">4、排序</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>sorted()</td>
<td>产生一个新流，其中自然排序</td>
</tr>
<tr>
<td>sorted(Comparator com)</td>
<td>产生一个姓刘，其中按比较器顺序排序</td>
</tr>
</tbody>
</table>
<h3 id="4-stream的终止操作">4、Stream的终止操作</h3>
<h4 id="1-匹配与查找">1、匹配与查找</h4>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">allMatch(Predicate p)</td>
<td style="text-align:left">检查是否匹配所有元素</td>
</tr>
<tr>
<td style="text-align:left">anyMatch(Predicate p)</td>
<td style="text-align:left">检查是否至少匹配一个元素</td>
</tr>
<tr>
<td style="text-align:left">noneMatch(Predicate p)</td>
<td style="text-align:left">检查是否没有匹配所有元素</td>
</tr>
<tr>
<td style="text-align:left">findFirst()</td>
<td style="text-align:left">返回第一个元素</td>
</tr>
<tr>
<td style="text-align:left">findAny()</td>
<td style="text-align:left">返回当前流的任意元素</td>
</tr>
<tr>
<td style="text-align:left">count()</td>
<td style="text-align:left">返回流中的元素总数</td>
</tr>
<tr>
<td style="text-align:left">max(Comparator c)</td>
<td style="text-align:left">返回流中最大值</td>
</tr>
<tr>
<td style="text-align:left">min(Comparator c)</td>
<td style="text-align:left">返回流中最小值</td>
</tr>
<tr>
<td style="text-align:left">forEach(Consumer c)</td>
<td style="text-align:left">内部迭代</td>
</tr>
</tbody>
</table>
<h4 id="2-归约">2、归约</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>reduce(T t,BinaryOperator b)</td>
<td>将流中元素反复结合，得到一个值。返回T</td>
</tr>
<tr>
<td>reduce(BinaryOperator b)</td>
<td>将流中元素反复结合，返回Optional<T></td>
</tr>
</tbody>
</table>
<h4 id="3-收集">3、收集</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>collect(Collector c)</td>
<td>将流转换为其他形式。接受一个Collector接口的实现，用于给Stream中元素做汇总的方法。（关于Collectors提供的静态方法见api）</td>
</tr>
</tbody>
</table>
<p>​		关于Optional回头补上。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringBoot尚硅谷笔记（上）]]></title>
        <id>https://KriseWang.github.io/post/springboot-shang-huo-gu-bi-ji-shang</id>
        <link href="https://KriseWang.github.io/post/springboot-shang-huo-gu-bi-ji-shang">
        </link>
        <updated>2019-12-05T04:40:11.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Boot 入门</p>
<h2 id=""></h2>
<h2 id="1-spring-boot-简介">1、Spring Boot 简介</h2>
<blockquote>
<p>简化Spring应用开发的一个框架；</p>
<p>整个Spring技术栈的一个大整合；</p>
<p>J2EE开发的一站式解决方案；</p>
</blockquote>
<h2 id="-2"></h2>
<h2 id="2-微服务">2、微服务</h2>
<p>2014，martin fowler</p>
<p>微服务：架构风格（服务微化）</p>
<p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p>
<p>单体应用：ALL IN ONE</p>
<p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p>
<p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p>
<h2 id="-3"></h2>
<h2 id="3-环境准备">3、环境准备</h2>
<p>http://www.gulixueyuan.com/ 谷粒学院</p>
<p>环境约束</p>
<ul>
<li>jdk1.8：Spring Boot 推荐jdk1.7及以上；java version &quot;1.8.0_112&quot;</li>
<li>maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</li>
<li>IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</li>
<li>SpringBoot 1.5.9.RELEASE：1.5.9；</li>
</ul>
<p>统一环境；</p>
<h3 id="-4"></h3>
<h3 id="1-maven设置">1、MAVEN设置；</h3>
<p>给maven 的settings.xml配置文件的profiles标签添加</p>
<pre><code class="language-xml">&lt;profile&gt;
  &lt;id&gt;jdk-1.8&lt;/id&gt;
  &lt;activation&gt;
    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
    &lt;jdk&gt;1.8&lt;/jdk&gt;
  &lt;/activation&gt;
  &lt;properties&gt;
    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
    &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;
  &lt;/properties&gt;
&lt;/profile&gt;
</code></pre>
<h3 id="-5"></h3>
<h3 id="2-idea设置">2、IDEA设置</h3>
<p>整合maven进来；</p>
<h2 id="-6"></h2>
<h2 id="4-spring-boot-helloworld">4、Spring Boot HelloWorld</h2>
<p>一个功能：</p>
<p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p>
<h3 id="-7"></h3>
<h3 id="1-创建一个maven工程jar">1、创建一个maven工程；（jar）</h3>
<h3 id="-8"></h3>
<h3 id="2-导入spring-boot相关的依赖">2、导入spring boot相关的依赖</h3>
<pre><code class="language-xml">    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
    &lt;/parent&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
</code></pre>
<h3 id="-9"></h3>
<h3 id="3-编写一个主程序启动spring-boot应用">3、编写一个主程序：启动Spring Boot应用</h3>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/20 18:06
 * @Description: @SpringBootApplication 来标注一个主程序，说明这是一个SpringBoot应用
 */
@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        
        // Spring应用启动起来
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>
<h3 id="-10"></h3>
<h3 id="4-编写相关的controller-service">4、编写相关的Controller、Service</h3>
<pre><code class="language-java">@Controller
public class HelloController {

    @ResponseBody
    @RequestMapping(&quot;/hello&quot;)
    public String hello(){
        return &quot;Hello World!&quot;;
    }
}
</code></pre>
<h3 id="-11"></h3>
<h3 id="5-运行主程序测试">5、运行主程序测试</h3>
<p>直接右键run<code>Application</code></p>
<h3 id="-12"></h3>
<h3 id="6-简化部署">6、简化部署</h3>
<figure data-type="image" tabindex="1"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/1537439192685.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/1537439192685.png" alt="1537439192685"></a></figure>
<p>在pom/xml文件引用插件</p>
<pre><code class="language-xml"> &lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
</code></pre>
<p>导入这个maven插件，利用idea打包，生成的jar包，可以使用<code>java -jar xxx.jar</code>启动</p>
<p>Spring Boot 使用嵌入式的Tomcat无需再配置Tomcat</p>
<h2 id="-13"></h2>
<h2 id="5-hello-world探究">5、Hello World探究</h2>
<h3 id="-14"></h3>
<h3 id="1-pom文件">1、POM文件</h3>
<h4 id="-15"></h4>
<h4 id="1-父项目">1、父项目</h4>
<pre><code class="language-xml">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
&lt;/parent&gt;
</code></pre>
<p>他的父项目是：</p>
<pre><code class="language-xml">&lt;parent&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;
  &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;
  &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;
&lt;/parent&gt;
</code></pre>
<p>这是真正管理Spring Boot应用里面所依赖的版本</p>
<p>Spring Boot的版本仲裁中心；</p>
<p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p>
<h4 id="-16"></h4>
<h4 id="2-启动器">2、启动器</h4>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>spring-boot-starter-web</strong>：</p>
<p>spring-boot-starter：spring-boot场景启动器，帮我们导入了web模块正常运行所依赖的组件；</p>
<p>点击进去可以看到帮我们引入很多web相关的依赖</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starters&lt;/artifactId&gt;
		&lt;version&gt;1.5.4.RELEASE&lt;/version&gt;
	&lt;/parent&gt;
	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
	&lt;name&gt;Spring Boot Web Starter&lt;/name&gt;
	&lt;description&gt;Starter for building web, including RESTful, applications using Spring
		MVC. Uses Tomcat as the default embedded container&lt;/description&gt;
	&lt;url&gt;http://projects.spring.io/spring-boot/&lt;/url&gt;
	&lt;organization&gt;
		&lt;name&gt;Pivotal Software, Inc.&lt;/name&gt;
		&lt;url&gt;http://www.spring.io&lt;/url&gt;
	&lt;/organization&gt;
	&lt;properties&gt;
		&lt;main.basedir&gt;${basedir}/../..&lt;/main.basedir&gt;
	&lt;/properties&gt;
	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
			&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
			&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework&lt;/groupId&gt;
			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework&lt;/groupId&gt;
			&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来，要用什么功能就导入什么场景的启动器</p>
<h3 id="-17"></h3>
<h3 id="2-主程序类主入口类">2、主程序类，主入口类</h3>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/20 18:06
 * @Description: @SpringBootApplication 来标注一个主程序，说明这是一个SpringBoot应用
 */
@SpringBootApplication
public class Application {

    public static void main(String[] args) {

        // Spring应用启动起来
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>
<p>@<strong>SpringBootApplication</strong> :  Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p>
<pre><code class="language-java">@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(excludeFilters = {
      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
public @interface SpringBootApplication {
</code></pre>
<ul>
<li>@<strong>SpringBootConfiguration</strong> : Spring Boot的配置类，标注在某个类上，表示这是一个Spring Boot的配置类</li>
<li>@<strong>Configuration</strong> : 配置类上来标注这个注解，配置类也是容器中的一个组件@Component</li>
<li>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能</li>
</ul>
<p>以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p>
<pre><code class="language-java">@AutoConfigurationPackage
@Import(EnableAutoConfigurationImportSelector.class)
public @interface EnableAutoConfiguration {
</code></pre>
<ul>
<li>
<p>@<strong>AutoConfigurationPackage</strong>：自动配置包</p>
<ul>
<li>@<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</li>
<li>Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</li>
</ul>
</li>
<li>
<p><strong>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；</strong></p>
</li>
<li>
<p>@<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)，给容器中导入组件</p>
<ul>
<li>EnableAutoConfigurationImportSelector：导入哪些组件的选择器；</li>
<li>将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中； 会给容器中导入非常多的自动配置类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件，并配置好这些组件；		<a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180129224104.png" alt="自动配置类"></a></li>
</ul>
</li>
<li>
<p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p>
</li>
<li>
<p>调用了<code>SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)</code>；</p>
</li>
<li>
<p>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</p>
</li>
<li>
<p>以前我们需要自己配置的东西，自动配置类都帮我们；</p>
</li>
<li>
<p>J2EE的整体整合解决方案和自动配置都在<code>spring-boot-autoconfigure-1.5.9.RELEASE.jar</code>；</p>
</li>
</ul>
<p><a href="https://pan.baidu.com/s/1Y3t24jisu3LJvSR8-jiRCw">Spring注解版视频</a></p>
<h2 id="-18"></h2>
<h2 id="6-使用spring-initializer快速创建spring-boot项目">6、使用Spring Initializer快速创建Spring Boot项目</h2>
<h3 id="-19"></h3>
<h3 id="1-idea使用-spring-initializer快速创建项目">1、IDEA：使用 Spring Initializer快速创建项目</h3>
<p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p>
<p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p>
<p>默认生成的Spring Boot项目；</p>
<ul>
<li>主程序已经生成好了，我们只需要我们自己的逻辑</li>
<li>resources文件夹中目录结构
<ul>
<li>static：保存所有的静态资源； js css  images；</li>
<li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h3 id="-20"></h3>
<h3 id="2-sts使用-spring-starter-project快速创建项目">2、STS使用 Spring Starter Project快速创建项目</h3>
<hr>
<h1 id="-21"></h1>
<h1 id="二-配置文件">二、配置文件</h1>
<h2 id="-22"></h2>
<h2 id="1-配置文件">1、配置文件</h2>
<p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain't Markup Language）</p>
<p>​	YAML  A Markup Language：是一个标记语言</p>
<p>​	YAML   isn't Markup Language：不是一个标记语言；</p>
<p>标记语言：</p>
<p>​	以前的配置文件；大多都使用的是  <strong>xxx.xml</strong>文件；</p>
<p>​	YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p>
<p>​	YAML：配置例子</p>
<pre><code>server:
  port: 8081
</code></pre>
<p>​	XML：</p>
<pre><code>&lt;server&gt;
	&lt;port&gt;8081&lt;/port&gt;
&lt;/server&gt;
</code></pre>
<h2 id="-23"></h2>
<h2 id="2-yaml语法">2、YAML语法：</h2>
<h3 id="-24"></h3>
<h3 id="1-基本语法">1、基本语法</h3>
<p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<pre><code>server:
    port: 8081
    path: /hello
</code></pre>
<p>属性和值也是大小写敏感；</p>
<h3 id="-25"></h3>
<h3 id="2-值的写法">2、值的写法</h3>
<h4 id="-26"></h4>
<h4 id="字面量普通的值数字字符串布尔">字面量：普通的值（数字，字符串，布尔）</h4>
<p>​	k: v：字面直接来写；</p>
<p>​		字符串默认不用加上单引号或者双引号；</p>
<p>​		&quot;&quot;：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​				name:   &quot;zhangsan \n lisi&quot;：输出；zhangsan 换行  lisi</p>
<p>​		''：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​				name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p>
<h4 id="-27"></h4>
<h4 id="对象-map属性和值键值对">对象、Map（属性和值）（键值对）：</h4>
<p>​	k: v：在下一行来写对象的属性和值的关系；注意缩进</p>
<p>​		对象还是k: v的方式</p>
<pre><code>friends:
	lastName: zhangsan
	age: 20
</code></pre>
<p>行内写法：</p>
<pre><code>friends: {lastName: zhangsan, age: 18}
</code></pre>
<h4 id="-28"></h4>
<h4 id="数组list-set">数组（List、Set）：</h4>
<p>用 - 值表示数组中的一个元素</p>
<pre><code>pets:
 - cat
 - dog
 - pig
</code></pre>
<p>行内写法</p>
<pre><code>pets: [cat, dog, pig]
</code></pre>
<h2 id="-29"></h2>
<h2 id="3-配置文件值注入">3、配置文件值注入</h2>
<p>配置文件</p>
<pre><code class="language-yml">person:
    lastName: hello
    age: 18
    boss: false
    birth: 2017/12/12
    maps: {k1: v1, k2: 12}
    lists:
      - lisi
      - zhaoliu
    dog:
      name: 小狗
      age: 12
</code></pre>
<p>javaBean：</p>
<ul>
<li>将配置文件中配置的每一个属性的值，映射到这个组件中</li>
<li>@ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</li>
<li>prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</li>
<li>只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；</li>
<li>@Data是一个插件，，免去了getter/setter和toString这些繁琐的东西</li>
</ul>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/20 19:34
 * @Description:
 */
@Data
@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
public class Person {

    private String lastName;
    private Integer age;
    private Boolean boss;
    private Date birth;

    private Map&lt;String,Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;

}
</code></pre>
<p>出现以下提示，进入官网，在pom中导入配置</p>
<figure data-type="image" tabindex="2"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/1537443412214.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/1537443412214.png" alt="1537443412214"></a></figure>
<p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<pre><code class="language-xml">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
			&lt;optional&gt;true&lt;/optional&gt;
		&lt;/dependency&gt;
</code></pre>
<h3 id="-30"></h3>
<h3 id="1-properties配置文件在idea中默认utf-8可能会乱码">1、properties配置文件在idea中默认utf-8可能会乱码</h3>
<p>调整</p>
<figure data-type="image" tabindex="3"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180130161620.png" alt="idea配置乱码"></a></figure>
<h3 id="-31"></h3>
<h3 id="2-value获取值和configurationproperties获取值比较">2、@Value获取值和@ConfigurationProperties获取值比较</h3>
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<p>松散语法绑定：last_name = last-name = lastName 他们取的值都是相同的</p>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<h3 id="-32"></h3>
<h3 id="3-配置文件注入值数据校验">3、配置文件注入值数据校验</h3>
<pre><code class="language-java">@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
@Validated
public class Person {

    /**
     * &lt;bean class=&quot;Person&quot;&gt;
     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;
     *      &lt;/property&gt;
     * &lt;bean/&gt;
     */

    // lastName必须是邮箱格式
    // @Email
    // @Value(&quot;${person.last-name}&quot;)
    private String lastName;
    // @Value(&quot;#{11*2}&quot;)
    private Integer age;
    // @Value(&quot;true&quot;)
    private Boolean boss;

    private Date birth;
    // @Value(&quot;${person.maps}&quot;)
    private Map&lt;String,Object&gt; maps;
    private List&lt;Object&gt; lists;
    private Dog dog;
}
</code></pre>
<h3 id="-33"></h3>
<h3 id="4-propertysourceimportresourcebean">4、@PropertySource&amp;@ImportResource&amp;@Bean</h3>
<p>@<strong>PropertySource</strong>：加载指定的配置文件；</p>
<pre><code class="language-java">/**
 * 将配置文件中配置的每一个属性的值，映射到这个组件中
 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；
 *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射
 *
 * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；
 *  @ConfigurationProperties(prefix = &quot;person&quot;)默认从全局配置文件中获取值；
 *
 */
@PropertySource(value = {&quot;classpath:person.properties&quot;})
@Component
@ConfigurationProperties(prefix = &quot;person&quot;)
//@Validated
public class Person {

    /**
     * &lt;bean class=&quot;Person&quot;&gt;
     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;&lt;/property&gt;
     * &lt;bean/&gt;
     */

   	// lastName必须是邮箱格式
   	// @Email
    // @Value(&quot;${person.last-name}&quot;)
    private String lastName;
    // @Value(&quot;#{11*2}&quot;)
    private Integer age;
    // @Value(&quot;true&quot;)
    private Boolean boss;
</code></pre>
<p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p>
<p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p>
<pre><code class="language-java">@ImportResource(locations = {&quot;classpath:beans.xml&quot;})
@SpringBootApplication
public class SpringbootApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringbootApplication.class, args);
	}
}
</code></pre>
<p>不来编写Spring的配置文件</p>
<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

    &lt;bean id=&quot;helloService&quot; class=&quot;com.cuzz.springboot.service.HelloService&quot;&gt;&lt;/bean&gt;
&lt;/beans&gt;
</code></pre>
<p>测试</p>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/20 20:41
 * @Description:
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class TestHelloService {

    @Autowired
    ApplicationContext ioc;

    @Test
    public void testHelloService() {
        boolean b = ioc.containsBean(&quot;helloService&quot;);
        System.out.println(b); 	// true
    }
}
</code></pre>
<p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类**@Configuration** --&gt; Spring配置文件</p>
<p>2、使用**@Bean**给容器中添加组件</p>
<pre><code class="language-java">/**
 * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件
 *
 * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件
 *
 */
@Configuration
public class MyAppConfig {

    // 将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名
    @Bean
    public HelloService helloService02(){
        System.out.println(&quot;配置类@Bean给容器中添加组件了...&quot;);
        return new HelloService();
    }
}
</code></pre>
<p>测试：</p>
<pre><code class="language-java">    @Test
    public void testHelloService() {
        boolean b = ioc.containsBean(&quot;helloService&quot;);
        System.out.println(b); // true
    }
</code></pre>
<p>输出：配置类@Bean给容器中添加组件了... 同时返回true</p>
<p>##4、配置文件占位符</p>
<h3 id="-34"></h3>
<h3 id="1-随机数">1、随机数</h3>
<pre><code>${random.value}、${random.int}、${random.long}
${random.int(10)}、${random.int[1024,65536]}
</code></pre>
<h3 id="-35"></h3>
<h3 id="2-占位符获取之前配置的值如果没有可以是用指定默认值">2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3>
<pre><code class="language-properties">person.last-name=张三${random.uuid}
person.age=${random.int}
person.birth=2017/12/15
person.boss=false
person.maps.k1=v1
person.maps.k2=14
person.lists=a,b,c
# 没有取到:后面是默认值
person.dog.name=${person.hello:hello}_dog
person.dog.age=15
</code></pre>
<h2 id="-36"></h2>
<h2 id="5-profile">5、Profile</h2>
<h3 id="-37"></h3>
<h3 id="1-多profile文件">1、多Profile文件</h3>
<p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="-38"></h3>
<h3 id="2-yml支持多文档块方式">2、yml支持多文档块方式</h3>
<pre><code>server:
  port: 8081
spring:
  profiles:
    active: prod

---
server:
  port: 8083
spring:
  profiles: dev


---

server:
  port: 8084
spring:
  profiles: prod  #指定属于哪个环境
</code></pre>
<h3 id="-39"></h3>
<h3 id="3-激活指定profile">3、激活指定profile</h3>
<p>​	1、在配置文件中指定  spring.profiles.active=dev</p>
<p>​	2、命令行：</p>
<p>​		java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev；</p>
<p>​		可以直接在测试的时候，配置传入命令行参数</p>
<p>​	3、虚拟机参数；</p>
<p>​		-Dspring.profiles.active=dev</p>
<h2 id="-40"></h2>
<h2 id="6-配置文件加载位置">6、配置文件加载位置</h2>
<p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p>
<p>–file:./config/   项目目录下的config</p>
<p>–file:./                项目目录下</p>
<p>–classpath:/config/      resources目录下的config</p>
<p>–classpath:/                   resources目录下</p>
<p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p>
<p>我们还可以通过spring.config.location来改变默认的配置文件位置</p>
<p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</p>
<h2 id="-41"></h2>
<h2 id="7-外部配置加载顺序">7、外部配置加载顺序</h2>
<p><strong>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</strong></p>
<p>1.命令行参数</p>
<p>所有的配置都可以在命令行上进行指定</p>
<p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --server.port=8087  --server.context-path=/abc</p>
<p>多个配置用空格分开； --配置项=值</p>
<p>2.来自java:comp/env的JNDI属性</p>
<p>3.Java系统属性（System.getProperties()）</p>
<p>4.操作系统环境变量</p>
<p>5.RandomValuePropertySource配置的random.*属性值</p>
<p>由jar包外向jar包内进行寻找；</p>
<p><strong>优先加载带profile</strong></p>
<p>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>
<p>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</p>
<p><strong>再来加载不带profile</strong></p>
<p>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</p>
<p>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</p>
<p>10.@Configuration注解类上的@PropertySource</p>
<p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p>
<p>所有支持的配置加载来源；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p>
<h2 id="-42"></h2>
<h2 id="8-自动配置原理">8、自动配置原理</h2>
<p>配置文件到底能写什么？怎么写？自动配置原理；</p>
<p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p>
<h3 id="-43"></h3>
<h3 id="1-自动配置原理">1、<strong>自动配置原理：</strong></h3>
<p>1）</p>
<ul>
<li>
<p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</p>
</li>
<li>
<p>可以查看selectImports()方法的内容；</p>
</li>
<li>
<p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>获取候选的配置</p>
<ul>
<li>
<pre><code>SpringFactoriesLoader.loadFactoryNames()
扫描所有jar包类路径下  META-INF/spring.factories
把扫描到的这些文件的内容包装成properties对象
从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中
</code></pre>
</li>
</ul>
</li>
</ul>
<p><strong>将类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中</strong></p>
<pre><code class="language-properties"># Auto Configure
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\
org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\
org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\
org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\
org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\
org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\
org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\
org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\
org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\
org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\
org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\
org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\
org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\
org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\
org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\
org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\
org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\
org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\
org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\
org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\
org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\
org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\
org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\
org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\
org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\
org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\
org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\
org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\
org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\
org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\
org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\
org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\
org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\
org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\
org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\
org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\
org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\
org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\
org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\
org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\
org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\
org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\
org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\
org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\
org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\
org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\
org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\
org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\
org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\
org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\
org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\
org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\
org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\
org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\
org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\
org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\
org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\
org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\
org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\
org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\
org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\
org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\
org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\
org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\
org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\
org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\
org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\
org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\
org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\
org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\
org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\
org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\
org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\
org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\
org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\
org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\
org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\
org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\
org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\
org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration
</code></pre>
<p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以**HttpEncodingAutoConfiguration（Http编码自动配置）**为例解释自动配置原理；</p>
<pre><code class="language-java">@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件
@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中

@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效

@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；

@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的
//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；
public class HttpEncodingAutoConfiguration {
  
  	//他已经和SpringBoot的配置文件映射了
  	private final HttpEncodingProperties properties;
  
   //只有一个有参构造器的情况下，参数的值就会从容器中拿
  	public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {
		this.properties = properties;
	}
  
    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取
	@ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？
	public CharacterEncodingFilter characterEncodingFilter() {
		CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();
		filter.setEncoding(this.properties.getCharset().name());
		filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));
		filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));
		return filter;
	}
</code></pre>
<p>根据当前不同的条件判断，决定这个配置类是否生效？</p>
<p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p>
<p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p>
<pre><code class="language-java">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)  //从配置文件中获取指定的值和bean的属性进行绑定
public class HttpEncodingProperties {

   public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;UTF-8&quot;);
</code></pre>
<p><strong>精髓：</strong></p>
<p>​	<strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p>
<p>​	<strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p>
<p>​	<strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p>
<p>​	<strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p>
<p>xxxxAutoConfigurartion：自动配置类；</p>
<p>给容器中添加组件</p>
<p>xxxxProperties:封装配置文件中相关属性；</p>
<h3 id="-44"></h3>
<h3 id="2-细节">2、细节</h3>
<h4 id="-45"></h4>
<h4 id="1-conditional派生注解spring注解版原生的conditional作用">1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4>
<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Conditional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody>
<tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean；</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody>
</table>
<p><strong>自动配置类必须在一定的条件下才能生效；</strong></p>
<p>我们怎么知道哪些自动配置类生效；</p>
<p><strong>我们可以通过启用  debug=true属性；来让控制台打印自动配置报告</strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p>
<pre><code class="language-java">=========================
AUTO-CONFIGURATION REPORT
=========================


Positive matches:（自动配置类启用的）
-----------------

   DispatcherServletAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)
      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)
        
    
Negative matches:（没有启动，没有匹配成功的自动配置类）
-----------------

   ActiveMQAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition)

   AopAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.aspectj.lang.annotation.Aspect', 'org.aspectj.lang.reflect.Advice' (OnClassCondition)
        
</code></pre>
<h1 id="-46"></h1>
<h1 id="三-日志">三、日志</h1>
<h2 id="-47"></h2>
<h2 id="1-日志框架">1、日志框架</h2>
<p>小张；开发一个大型系统；</p>
<p>​		1、System.out.println(&quot;&quot;)；将关键数据打印在控制台；去掉？写在一个文件？</p>
<p>​		2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p>
<p>​		3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p>
<p>​		4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p>
<p>​		5、JDBC---数据库驱动；</p>
<p>​			写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p>
<p>​			给项目中导入具体的日志实现就行了；我们之前 的日志框架都是实现的抽象层；</p>
<p><strong>市面上的日志框架；</strong></p>
<p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....</p>
<table>
<thead>
<tr>
<th>日志门面  （日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody>
<tr>
<td><s>JCL（Jakarta  Commons Logging）</s>    SLF4j（Simple  Logging Facade for Java）    <strong>jboss-logging</strong></td>
<td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td>
</tr>
</tbody>
</table>
<p>左边选一个门面（抽象层）、右边来选一个实现；</p>
<p>日志门面：  SLF4J；</p>
<p>日志实现：Logback；</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；</p>
<p><strong>SpringBoot选用 SLF4j和logback；</strong></p>
<h2 id="-48"></h2>
<h2 id="2-slf4j使用">2、SLF4j使用</h2>
<h3 id="-49"></h3>
<h3 id="1-如何在系统中使用slf4j-httpswwwslf4jorg">1、如何在系统中使用SLF4j   https://www.slf4j.org</h3>
<p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p>
<p>给系统里面导入slf4j的jar和  logback的实现jar</p>
<pre><code class="language-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HelloWorld {
  public static void main(String[] args) {
    Logger logger = LoggerFactory.getLogger(HelloWorld.class);
    logger.info(&quot;Hello World&quot;);
  }
}
</code></pre>
<p>图示；</p>
<figure data-type="image" tabindex="4"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/concrete-bindings.png?raw=true" alt="concrete-bindings.png"></figure>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p>
<h3 id="-50"></h3>
<h3 id="2-遗留问题">2、遗留问题</h3>
<p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p>
<p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p>
<figure data-type="image" tabindex="5"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/legacy.png?raw=true" alt="legacy.png"></figure>
<p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p>
<p>1、将系统中其他日志框架先排除出去；</p>
<p>2、用中间包来替换原有的日志框架；</p>
<p>3、我们导入slf4j其他的实现</p>
<h2 id="-51"></h2>
<h2 id="3-springboot日志关系">3、SpringBoot日志关系</h2>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
		&lt;/dependency&gt;
</code></pre>
<p>SpringBoot使用它来做日志功能；</p>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;
		&lt;/dependency&gt;
</code></pre>
<p>底层依赖关系</p>
<figure data-type="image" tabindex="6"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131220946.png?raw=true" alt="搜狗截图20180131220946.png"></figure>
<p>总结：</p>
<p>​	1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
<p>​	2）、SpringBoot也把其他的日志都替换成了slf4j；</p>
<p>​	3）、中间替换包？</p>
<pre><code class="language-java">@SuppressWarnings(&quot;rawtypes&quot;)
public abstract class LogFactory {

    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = &quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;;

    static LogFactory logFactory = new SLF4JLogFactory();
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180131221411.png?raw=true" alt="搜狗截图20180131221411.png"></figure>
<p>​	4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p>
<p>​			Spring框架用的是commons-logging；</p>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework&lt;/groupId&gt;
			&lt;artifactId&gt;spring-core&lt;/artifactId&gt;
			&lt;exclusions&gt;
				&lt;exclusion&gt;
					&lt;groupId&gt;commons-logging&lt;/groupId&gt;
					&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
				&lt;/exclusion&gt;
			&lt;/exclusions&gt;
		&lt;/dependency&gt;
</code></pre>
<p><strong>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</strong></p>
<h2 id="-52"></h2>
<h2 id="4-日志使用">4、日志使用；</h2>
<h3 id="-53"></h3>
<h3 id="1-默认配置">1、默认配置</h3>
<p>SpringBoot默认帮我们配置好了日志；</p>
<pre><code class="language-java">	//记录器
	Logger logger = LoggerFactory.getLogger(getClass());
	@Test
	public void contextLoads() {
		//System.out.println();

		//日志的级别；
		//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error
		//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效
		logger.trace(&quot;这是trace日志...&quot;);
		logger.debug(&quot;这是debug日志...&quot;);
		//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别
		logger.info(&quot;这是info日志...&quot;);
		logger.warn(&quot;这是warn日志...&quot;);
		logger.error(&quot;这是error日志...&quot;);


	}
    日志输出格式：
		%d表示日期时间，
		%thread表示线程名，
		%-5level：级别从左显示5个字符宽度
		%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
		%msg：日志消息，
		%n是换行符
    --&gt;
    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
</code></pre>
<p>SpringBoot修改日志的默认配置</p>
<pre><code class="language-properties">logging.level.com.cuzz=trace

#logging.path=
# 不指定路径在当前项目下生成springboot.log日志
# 可以指定完整的路径；
#logging.file=G:/springboot.log

# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件
logging.path=/spring/log

#  在控制台输出的日志的格式
logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
# 指定文件中日志输出的格式
logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n
</code></pre>
<table>
<thead>
<tr>
<th>logging.file</th>
<th>logging.path</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>(none)</td>
<td>(none)</td>
<td></td>
<td>只在控制台输出</td>
</tr>
<tr>
<td>指定文件名</td>
<td>(none)</td>
<td>my.log</td>
<td>输出日志到my.log文件</td>
</tr>
<tr>
<td>(none)</td>
<td>指定目录</td>
<td>/var/log</td>
<td>输出到指定目录的 spring.log 文件中</td>
</tr>
</tbody>
</table>
<h3 id="-54"></h3>
<h3 id="2-指定配置">2、指定配置</h3>
<p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p>
<table>
<thead>
<tr>
<th>Logging System</th>
<th>Customization</th>
</tr>
</thead>
<tbody>
<tr>
<td>Logback</td>
<td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td>
</tr>
<tr>
<td>Log4j2</td>
<td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td>JDK (Java Util Logging)</td>
<td><code>logging.properties</code></td>
</tr>
</tbody>
</table>
<p>logback.xml：直接就被日志框架识别了；</p>
<p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<pre><code class="language-xml">&lt;springProfile name=&quot;staging&quot;&gt;
    &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;
  	可以指定某段配置只在某个环境下生效
&lt;/springProfile&gt;
</code></pre>
<p>如：</p>
<pre><code class="language-xml">&lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;!--
        日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
			%msg：日志消息，
			%n是换行符
        --&gt;
        &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;
            &lt;springProfile name=&quot;dev&quot;&gt;
                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ----&gt; [%thread] ---&gt; %-5level %logger{50} - %msg%n&lt;/pattern&gt;
            &lt;/springProfile&gt;
            &lt;springProfile name=&quot;!dev&quot;&gt;
                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n&lt;/pattern&gt;
            &lt;/springProfile&gt;
        &lt;/layout&gt;
    &lt;/appender&gt;
</code></pre>
<p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p>
<pre><code>no applicable action for [springProfile]
</code></pre>
<p>推荐使用<code>spring-logbac.xml</code> 是由Spring Boot识别，可以使用新功能</p>
<h2 id="-55"></h2>
<h2 id="5-切换日志框架">5、切换日志框架</h2>
<p>可以按照slf4j的日志适配图，进行相关的切换；</p>
<p>slf4j+log4j的方式；</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
  &lt;exclusions&gt;
    &lt;exclusion&gt;
      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
    &lt;/exclusion&gt;
    &lt;exclusion&gt;
      &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;
      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
    &lt;/exclusion&gt;
  &lt;/exclusions&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>切换为log4j2</p>
<pre><code class="language-xml">   &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;
                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<hr>
<h1 id="-56"></h1>
<h1 id="四-web开发">四、Web开发</h1>
<h2 id="-57"></h2>
<h2 id="1-简介">1、简介</h2>
<p>使用SpringBoot；</p>
<p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p>
<p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p>
<p><strong>3）、自己编写业务代码；</strong></p>
<p><strong>自动配置原理？</strong></p>
<p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p>
<pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；
xxxxProperties:配置类来封装配置文件的内容；
</code></pre>
<h2 id="-58"></h2>
<h2 id="2-springboot对静态资源的映射规则">2、SpringBoot对静态资源的映射规则；</h2>
<pre><code>@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)
public class ResourceProperties implements ResourceLoaderAware {
  //可以设置和静态资源有关的参数，缓存时间等
</code></pre>
<p>这个类WebMvcAuotConfiguration：</p>
<pre><code class="language-java">org\springframework\boot\autoconfigure\web\servlet\WebMvcAutoConfiguration.java
		@Override
		public void addResourceHandlers(ResourceHandlerRegistry registry) {
			if (!this.resourceProperties.isAddMappings()) {
				logger.debug(&quot;Default resource handling disabled&quot;);
				return;
			}
			Integer cachePeriod = this.resourceProperties.getCachePeriod();
			if (!registry.hasMappingForPattern(&quot;/webjars/**&quot;)) {
				customizeResourceHandlerRegistration(
						registry.addResourceHandler(&quot;/webjars/**&quot;)
								.addResourceLocations(
										&quot;classpath:/META-INF/resources/webjars/&quot;)
						.setCachePeriod(cachePeriod));
			}
			String staticPathPattern = this.mvcProperties.getStaticPathPattern();
          	// 静态资源文件夹映射
			if (!registry.hasMappingForPattern(staticPathPattern)) {
				customizeResourceHandlerRegistration(
						registry.addResourceHandler(staticPathPattern)
								.addResourceLocations(
										this.resourceProperties.getStaticLocations())
						.setCachePeriod(cachePeriod));
			}
		}

         // 配置欢迎页映射
		@Bean
		public WelcomePageHandlerMapping welcomePageHandlerMapping(
				ResourceProperties resourceProperties) {
			return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),
					this.mvcProperties.getStaticPathPattern());
		}

         // 配置喜欢的图标
		@Configuration
		@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)
		public static class FaviconConfiguration {

			private final ResourceProperties resourceProperties;

			public FaviconConfiguration(ResourceProperties resourceProperties) {
				this.resourceProperties = resourceProperties;
			}

			@Bean
			public SimpleUrlHandlerMapping faviconHandlerMapping() {
				SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();
				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);
              	 // 所有  **/favicon.ico 
				mapping.setUrlMap(Collections.singletonMap(&quot;**/favicon.ico&quot;,
						faviconRequestHandler()));
				return mapping;
			}

			@Bean
			public ResourceHttpRequestHandler faviconRequestHandler() {
				ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();
				requestHandler
						.setLocations(this.resourceProperties.getFaviconLocations());
				return requestHandler;
			}

		}
</code></pre>
<p>1）、所有 <code>/webjars/**</code> ，都去<code>classpath:/META-INF/resources/webjars/</code> 找资源；</p>
<p>​	<code>webjars</code>：以jar包的方式引入静态资源；</p>
<p>http://www.webjars.org/</p>
<figure data-type="image" tabindex="8"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180203181751.png?raw=true" alt="搜狗截图20180203181751.png"></figure>
<p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p>
<pre><code class="language-xml">&lt;!--引入jquery-webjar--&gt;在访问的时候只需要写webjars下面资源的名称即可
		&lt;dependency&gt;
			&lt;groupId&gt;org.webjars&lt;/groupId&gt;
			&lt;artifactId&gt;jquery&lt;/artifactId&gt;
			&lt;version&gt;3.3.1&lt;/version&gt;
		&lt;/dependency&gt;
</code></pre>
<p>2）、&quot;/**&quot; 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</p>
<pre><code class="language-xml">&quot;classpath:/META-INF/resources/&quot;, 
&quot;classpath:/resources/&quot;,
&quot;classpath:/static/&quot;, 
&quot;classpath:/public/&quot; 
&quot;/&quot;：当前项目的根路径
</code></pre>
<p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p>
<p>3）、欢迎页； 静态资源文件夹下的所有index.html页面；被&quot;/**&quot;映射；</p>
<p>​	localhost:8080/   找index页面</p>
<p>4）、所有的 **/favicon.ico  都是在静态资源文件下找；</p>
<h2 id="-59"></h2>
<h2 id="3-模板引擎">3、模板引擎</h2>
<p>JSP、Velocity、Freemarker、Thymeleaf</p>
<figure data-type="image" tabindex="9"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/template-engine.png?raw=true" alt="template-engine.png"></figure>
<p>SpringBoot推荐的Thymeleaf；</p>
<p>语法更简单，功能更强大；</p>
<h3 id="-60"></h3>
<h3 id="1-引入thymeleaf">1、引入thymeleaf；</h3>
<p><a href="https://www.thymeleaf.org/">thymeleaf官网</a></p>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
          	2.1.6
		&lt;/dependency&gt;
切换thymeleaf版本
&lt;properties&gt;
		&lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt;
		&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;
		&lt;!-- thymeleaf2   layout1--&gt;
		&lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;/thymeleaf-layout-dialect.version&gt;
  &lt;/properties&gt;
</code></pre>
<h3 id="-61"></h3>
<h3 id="2-thymeleaf使用">2、Thymeleaf使用</h3>
<pre><code class="language-java">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)
public class ThymeleafProperties {

	private static final Charset DEFAULT_ENCODING = Charset.forName(&quot;UTF-8&quot;);

	private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(&quot;text/html&quot;);

	public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;

	public static final String DEFAULT_SUFFIX = &quot;.html&quot;;
  	//
</code></pre>
<p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p>
<p>使用：</p>
<p>1、导入thymeleaf的名称空间</p>
<pre><code class="language-html">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
</code></pre>
<p>2、使用thymeleaf语法；</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;成功！&lt;/h1&gt;
    &lt;!--th:text 将div里面的文本内容设置为 --&gt;
    &lt;div th:text=&quot;${hello}&quot;&gt;这是显示欢迎信息&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="-62"></h3>
<h3 id="3-语法规则">3、语法规则</h3>
<p>1）、th:text；改变当前元素里面的文本内容；</p>
<p>​	th：任意html属性；来替换原生属性的值</p>
<figure data-type="image" tabindex="10"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/2018-02-04_123955.png?raw=true" alt="2018-02-04_123955.png"></figure>
<p>2）、表达式？</p>
<pre><code class="language-properties">Simple expressions:（表达式语法）
a. Variable Expressions: ${...}：获取变量值；OGNL；
	1）、获取对象的属性、调用方法
	2）、使用内置的基本对象：
    #ctx : the context object.
    #vars: the context variables.
    #locale : the context locale.
    #request : (only in Web Contexts) the HttpServletRequest object.
    #response : (only in Web Contexts) the HttpServletResponse object.
    #session : (only in Web Contexts) the HttpSession object.
    #servletContext : (only in Web Contexts) the ServletContext object.
	${session.foo}
    3）、内置的一些工具对象：
        #execInfo : information about the template being processed.
        #messages : methods for obtaining externalized messages inside variables expressions,
        #          in the same way as they would be obtained using #{…} syntax.
        #uris : methods for escaping parts of URLs/URIs
        #conversions : methods for executing the configured conversion service (if any).
        #dates : methods for java.util.Date objects: formatting, component extraction, etc.
        #calendars : analogous to #dates , but for java.util.Calendar objects.
        #numbers : methods for formatting numeric objects.
        #strings : methods for String objects: contains, startsWith, prepending/appending, etc.
        #objects : methods for objects in general.
        #bools : methods for boolean evaluation.
        #arrays : methods for arrays.
        #lists : methods for lists.
        #sets : methods for sets.
        #maps : methods for maps.
        #aggregates : methods for creating aggregates on arrays or collections.
        #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).

b. Selection Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；
    	补充：配合 th:object=&quot;${session.user}：
        &lt;div th:object=&quot;${session.user}&quot;&gt;
        &lt;p&gt;Name: &lt;span th:text=&quot;*{firstName}&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;
        &lt;p&gt;Surname: &lt;span th:text=&quot;*{lastName}&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;
        &lt;p&gt;Nationality: &lt;span th:text=&quot;*{nationality}&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;
        &lt;/div&gt;
    
c. Message Expressions: #{...}：获取国际化内容
d. Link URL Expressions: @{...}：定义URL；
    		@{/order/process(execId=${execId},execType='FAST')}
f. Fragment Expressions: ~{...}：片段引用表达式
    		&lt;div th:insert=&quot;~{commons :: main}&quot;&gt;...&lt;/div&gt;
    		
Literals（字面量）
    Text literals: 'one text' , 'Another one!' ,…
    Number literals: 0 , 34 , 3.0 , 12.3 ,…
    Boolean literals: true , false
    Null literal: null
    Literal tokens: one , sometext , main ,…
Text operations:（文本操作）
    String concatenation: +
    Literal substitutions: |The name is ${name}|
Arithmetic operations:（数学运算）
    Binary operators: + , - , * , / , %
    Minus sign (unary operator): -
Boolean operations:（布尔运算）
    Binary operators: and , or
    Boolean negation (unary operator): ! , not
Comparisons and equality:（比较运算）
    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )
    Equality operators: == , != ( eq , ne )
Conditional operators:条件运算（三元运算符）
    If-then: (if) ? (then)
    If-then-else: (if) ? (then) : (else)
    Default: (value) ?: (defaultvalue)
Special tokens:
    No-Operation: _ 
</code></pre>
<h2 id="-63"></h2>
<h2 id="4-springmvc自动配置">4、SpringMVC自动配置</h2>
<p>https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</p>
<h3 id="-64"></h3>
<h3 id="1-spring-mvc-auto-configuration">1. Spring MVC auto-configuration</h3>
<p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置:<strong>（WebMvcAutoConfiguration）</strong></p>
<ul>
<li>
<p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li>
<li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li>
<li>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；</li>
</ul>
</li>
<li>
<p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p>
</li>
<li>
<p>Static <code>index.html</code> support. 静态首页访问</p>
</li>
<li>
<p>Custom <code>Favicon</code> support (see below).  favicon.ico</p>
</li>
<li>
<p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p>
<ul>
<li><code>Converter</code>：转换器；  public String hello(User user)：类型转换使用Converter</li>
<li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li>
</ul>
</li>
</ul>
<pre><code class="language-java">@Bean
@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)//在文件中配置日期格式化的规则
public Formatter&lt;Date&gt; dateFormatter() {
    return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件
}
</code></pre>
<p>​	自己添加的格式化器转换器，我们只需要放在容器中即可</p>
<ul>
<li>
<p>Support for <code>HttpMessageConverters</code> (see below).</p>
<ul>
<li>
<p><code>HttpMessageConverter</code>：SpringMVC用来转换Http请求和响应的；User---Json；</p>
</li>
<li>
<p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p>
<p>自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）</p>
</li>
</ul>
</li>
<li>
<p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p>
</li>
<li>
<p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p>
<p>我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）</p>
<pre><code>初始化WebDataBinder；
请求数据=====JavaBean；
</code></pre>
</li>
</ul>
<p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p>
<p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p>
<h3 id="-65"></h3>
<h3 id="2-扩展springmvc">2、扩展SpringMVC</h3>
<pre><code class="language-xml">    &lt;mvc:view-controller path=&quot;/hello&quot; view-name=&quot;success&quot;/&gt;
    &lt;mvc:interceptors&gt;
        &lt;mvc:interceptor&gt;
            &lt;mvc:mapping path=&quot;/hello&quot;/&gt;
            &lt;bean&gt;&lt;/bean&gt;
        &lt;/mvc:interceptor&gt;
    &lt;/mvc:interceptors&gt;
</code></pre>
<p><strong>编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc</strong>;</p>
<p>既保留了所有的自动配置，也能用我们扩展的配置；</p>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/21 14:29
 * @Description:
 */
@Configuration
// WebMvcConfigurerAdapter过时,使用WebMvcConfigurer接口
public class MyMvcConfig implements WebMvcConfigurer {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        // 浏览器发送 /cuzz 请求来到 success
        registry.addViewController(&quot;/cuzz&quot;).setViewName(&quot;success&quot;);
    }
}
</code></pre>
<p>原理：</p>
<p>​	1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p>
<p>​	2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p>
<pre><code class="language-java">    @Configuration
	public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {
      private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();

	 //从容器中获取所有的WebMvcConfigurer
      @Autowired(required = false)
      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) {
          if (!CollectionUtils.isEmpty(configurers)) {
              this.configurers.addWebMvcConfigurers(configurers);
            	//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  
            	@Override
             	// public void addViewControllers(ViewControllerRegistry registry) {
              	// 	    for (WebMvcConfigurer delegate : this.delegates) {
               	//      delegate.addViewControllers(registry);
               	//   }
              }
          }
	}
</code></pre>
<p>​	3）、容器中所有的WebMvcConfigurer都会一起起作用；</p>
<p>​	4）、我们的配置类也会被调用；</p>
<p>​	效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p>
<h3 id="-66"></h3>
<h3 id="3-全面接管springmvc">3、全面接管SpringMVC；</h3>
<p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p>
<p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p>
<pre><code class="language-java">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能
@EnableWebMvc
@Configuration
public class MyMvcConfig extends WebMvcConfigurerAdapter {

    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
       // super.addViewControllers(registry);
        //浏览器发送 /atguigu 请求来到 success
        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);
    }
}
</code></pre>
<p>原理：</p>
<p>为什么@EnableWebMvc自动配置就失效了；</p>
<p>1）@EnableWebMvc的核心</p>
<pre><code class="language-java">@Import(DelegatingWebMvcConfiguration.class)
public @interface EnableWebMvc {
</code></pre>
<p>2）、</p>
<pre><code class="language-java">@Configuration
public class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {
</code></pre>
<p>3）、</p>
<pre><code class="language-java">@Configuration
@ConditionalOnWebApplication
@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,
		WebMvcConfigurerAdapter.class })
// 容器中没有这个组件的时候，这个自动配置类才生效
@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)
@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,
		ValidationAutoConfiguration.class })
public class WebMvcAutoConfiguration {
</code></pre>
<p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p>
<p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p>
<h2 id="-67"></h2>
<h2 id="5-如何修改springboot的默认配置">5、如何修改SpringBoot的默认配置</h2>
<p>模式：</p>
<p>​	1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p>
<p>​	2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p>
<p>​	3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>
<h2 id="-68"></h2>
<h2 id="6-restfulcrud">6、RestfulCRUD</h2>
<h3 id="-69"></h3>
<h3 id="1-默认访问首页">1）、默认访问首页</h3>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/21 14:29
 * @Description:
 */
@Configuration
// WebMvcConfigurerAdapter过时,使用WebMvcConfigurer接口
public class MyMvcConfig implements WebMvcConfigurer {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController(&quot;/cuzz&quot;).setViewName(&quot;success&quot;);
    }
    // 所有的WebMvcConfigurerAdapter组件都会一起起作用
    @Bean
    public WebMvcConfigurer webMvcConfigurer() {
        WebMvcConfigurer webMvcConfigurer = new WebMvcConfigurer() {
            @Override
            public void addViewControllers(ViewControllerRegistry registry) {
                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);
                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);
            }
        };
        return webMvcConfigurer;
    }
}
</code></pre>
<h3 id="-70"></h3>
<h3 id="2-国际化">2）、国际化</h3>
<p><strong>1）、编写国际化配置文件；</strong></p>
<p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p>
<p>3）、在页面使用fmt:message取出国际化内容</p>
<p>i18n = internationalization（国际化）的缩写，首位的i和末尾的n之间有18个字母，所以就简写为i18n了</p>
<p>步骤：</p>
<p>new -&gt; add properties file to resource bundle 要先新建一个properties文件，xxx_en_US.properties语言和国家</p>
<figure data-type="image" tabindex="11"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/1537515512779.png?raw=true" alt="1537515512779.png"></figure>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<figure data-type="image" tabindex="12"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/1537515666575.png?raw=true" alt="1537515666575.png"></figure>
<figure data-type="image" tabindex="13"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211130721.png?raw=true" alt="搜狗截图20180211130721.png"></figure>
<p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p>
<pre><code class="language-java">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)
public class MessageSourceAutoConfiguration {
    
    /**
	 * Comma-separated list of basenames (essentially a fully-qualified classpath
	 * location), each following the ResourceBundle convention with relaxed support for
	 * slash based locations. If it doesn't contain a package qualifier (such as
	 * &quot;org.mypackage&quot;), it will be resolved from the classpath root.
	 */
	private String basename = &quot;messages&quot;;  
    //我们的配置文件可以直接放在类路径下叫messages.properties；
    
    @Bean
	public MessageSource messageSource() {
		ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
		if (StringUtils.hasText(this.basename)) {
            //设置国际化资源文件的基础名（去掉语言国家代码的）
			messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(
					StringUtils.trimAllWhitespace(this.basename)));
		}
		if (this.encoding != null) {
			messageSource.setDefaultEncoding(this.encoding.name());
		}
		messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);
		messageSource.setCacheSeconds(this.cacheSeconds);
		messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);
		return messageSource;
	}
</code></pre>
<p>3）、去页面获取国际化的值；</p>
<figure data-type="image" tabindex="14"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180211134506.png?raw=true" alt="搜狗截图20180211134506.png"></figure>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;  xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
	&lt;head&gt;
		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;
		&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
		&lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;
		&lt;title&gt;Signin Template for Bootstrap&lt;/title&gt;
		&lt;!-- Bootstrap core CSS --&gt;
		&lt;link href=&quot;asserts/css/bootstrap.min.css&quot; th:href=&quot;@{/webjars/bootstrap/4.0.0/css/bootstrap.css}&quot; rel=&quot;stylesheet&quot;&gt;
		&lt;!-- Custom styles for this template --&gt;
		&lt;link href=&quot;asserts/css/signin.css&quot; th:href=&quot;@{/asserts/css/signin.css}&quot; rel=&quot;stylesheet&quot;&gt;
	&lt;/head&gt;

	&lt;body class=&quot;text-center&quot;&gt;
		&lt;form class=&quot;form-signin&quot; action=&quot;dashboard.html&quot;&gt;
			&lt;img class=&quot;mb-4&quot; th:src=&quot;@{/asserts/img/bootstrap-solid.svg}&quot; src=&quot;asserts/img/bootstrap-solid.svg&quot; alt=&quot;&quot; width=&quot;72&quot; height=&quot;72&quot;&gt;
			&lt;h1 class=&quot;h3 mb-3 font-weight-normal&quot; th:text=&quot;#{login.tip}&quot;&gt;Please sign in&lt;/h1&gt;
			&lt;label class=&quot;sr-only&quot; th:text=&quot;#{login.username}&quot;&gt;Username&lt;/label&gt;
			&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; th:placeholder=&quot;#{login.username}&quot; required=&quot;&quot; autofocus=&quot;&quot;&gt;
			&lt;label class=&quot;sr-only&quot; th:text=&quot;#{login.password}&quot;&gt;Password&lt;/label&gt;
			&lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; th:placeholder=&quot;#{login.password}&quot; required=&quot;&quot;&gt;
			&lt;div class=&quot;checkbox mb-3&quot;&gt;
				&lt;label&gt;
          		&lt;input type=&quot;checkbox&quot; value=&quot;remember-me&quot;/&gt; [[#{login.remember}]]
        &lt;/label&gt;
			&lt;/div&gt;
			&lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; type=&quot;submit&quot; th:text=&quot;#{login.btn}&quot;&gt;Sign in&lt;/button&gt;
			&lt;p class=&quot;mt-5 mb-3 text-muted&quot;&gt;© 2017-2018&lt;/p&gt;
			&lt;a class=&quot;btn btn-sm&quot;&gt;中文&lt;/a&gt;
			&lt;a class=&quot;btn btn-sm&quot;&gt;English&lt;/a&gt;
		&lt;/form&gt;

	&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p>效果：根据浏览器语言设置的信息切换了国际化；</p>
<p>原理：</p>
<p>​	国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p>
<pre><code class="language-java">		@Bean
		@ConditionalOnMissingBean
		@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)
		public LocaleResolver localeResolver() {
			if (this.mvcProperties
					.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {
				return new FixedLocaleResolver(this.mvcProperties.getLocale());
			}
			AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();
			localeResolver.setDefaultLocale(this.mvcProperties.getLocale());
			return localeResolver;
		}
默认的就是根据请求头带来的区域信息获取Locale进行国际化
</code></pre>
<p>4）、点击链接切换国际化</p>
<pre><code class="language-java">/**
 * 可以在连接上携带区域信息
 */
public class MyLocaleResolver implements LocaleResolver {
    
    @Override
    public Locale resolveLocale(HttpServletRequest request) {
        String l = request.getParameter(&quot;l&quot;);
        Locale locale = Locale.getDefault();
        if(!StringUtils.isEmpty(l)){
            String[] split = l.split(&quot;_&quot;);
            locale = new Locale(split[0],split[1]);
        }
        return locale;
    }

    @Override
    public void setLocale(HttpServletRequest request, 
                          HttpServletResponse response,
                          Locale locale) {

    }


	// 国际化注入
 	@Bean
    public LocaleResolver localeResolver(){
        return new MyLocaleResolver();
    }
}
</code></pre>
<h3 id="-71"></h3>
<h3 id="3-登陆">3）、登陆</h3>
<p>开发期间模板引擎页面修改以后，要实时生效</p>
<p>1）、禁用模板引擎的缓存</p>
<pre><code># 禁用缓存
spring.thymeleaf.cache=false 
</code></pre>
<p>2）、页面修改完成以后ctrl+f9：重新编译；</p>
<p>登陆错误消息的显示</p>
<pre><code>&lt;p style=&quot;color: red&quot; th:text=&quot;${msg}&quot; th:if=&quot;${not #strings.isEmpty(msg)}&quot;&gt;&lt;/p&gt;
</code></pre>
<h3 id="-72"></h3>
<h3 id="4-拦截器进行登陆检查">4）、拦截器进行登陆检查</h3>
<p>拦截器</p>
<pre><code class="language-java">/**
 * 登陆检查，
 */
public class LoginHandlerInterceptor implements HandlerInterceptor {
    //目标方法执行之前
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        Object user = request.getSession().getAttribute(&quot;loginUser&quot;);
        if(user == null){
            //未登陆，返回登陆页面
            request.setAttribute(&quot;msg&quot;,&quot;没有权限请先登陆&quot;);
            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response);
            return false;
        }else{
            //已登陆，放行请求
            return true;
        }

    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {

    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {

    }
}
</code></pre>
<p>注册拦截器</p>
<pre><code class="language-java">/**
 * @Author: cuzz
 * @Date: 2018/9/21 14:29
 * @Description:
 */
@Configuration
// WebMvcConfigurerAdapter过时,使用WebMvcConfigurer接口
public class MyMvcConfig implements WebMvcConfigurer {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController(&quot;/cuzz&quot;).setViewName(&quot;success&quot;);
    }
    //注册拦截器
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        //super.addInterceptors(registry);
        //静态资源；  *.css , *.js
        //SpringBoot已经做好了静态资源映射
        registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;/**&quot;)
                .excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;);
    }

    // 所有的WebMvcConfigurerAdapter组件都会一起起作用
    @Bean
    public WebMvcConfigurer webMvcConfigurer() {
        WebMvcConfigurer webMvcConfigurer = new WebMvcConfigurer() {
            @Override
            public void addViewControllers(ViewControllerRegistry registry) {
                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);
                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);
                registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);
            }
        };
        return webMvcConfigurer;
    }

    @Bean
    public LocaleResolver localeResolver() {
        return new MyLocaleResolver();
    }
}
</code></pre>
<h3 id="-73"></h3>
<h3 id="5-crud-员工列表">5）、CRUD-员工列表</h3>
<p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格；</p>
<p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p>
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询</td>
<td>getEmp</td>
<td>emp---GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp---POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}---PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}---DELETE</td>
</tr>
</tbody>
</table>
<p>2）、实验的请求架构;</p>
<table>
<thead>
<tr>
<th>实验功能</th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工(来到修改页面)</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/1</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/1</td>
<td>DELETE</td>
</tr>
</tbody>
</table>
<p>3）、员工列表：</p>
<h4 id="-74"></h4>
<h4 id="thymeleaf公共页面元素抽取">thymeleaf公共页面元素抽取</h4>
<pre><code>1、抽取公共片段
&lt;div th:fragment=&quot;copy&quot;&gt;
&amp;copy; 2011 The Good Thymes Virtual Grocery
&lt;/div&gt;

2、引入公共片段
&lt;div th:insert=&quot;~{footer :: copy}&quot;&gt;&lt;/div&gt;
~{templatename::selector}：模板名::选择器
~{templatename::fragmentname}:模板名::片段名

3、默认效果：
insert的公共片段在div标签中
如果使用th:insert等属性进行引入，可以不用写~{}：
行内写法可以加上：[[~{}]];[(~{})]；
</code></pre>
<p>三种引入公共片段的th属性：</p>
<p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p>
<pre><code class="language-html">&lt;footer th:fragment=&quot;copy&quot;&gt;
&amp;copy; 2011 The Good Thymes Virtual Grocery
&lt;/footer&gt;

引入方式
&lt;div th:insert=&quot;footer :: copy&quot;&gt;&lt;/div&gt;
&lt;div th:replace=&quot;footer :: copy&quot;&gt;&lt;/div&gt;
&lt;div th:include=&quot;footer :: copy&quot;&gt;&lt;/div&gt;

效果
&lt;div&gt;
    &lt;footer&gt;
    &amp;copy; 2011 The Good Thymes Virtual Grocery
    &lt;/footer&gt;
&lt;/div&gt;

&lt;footer&gt;
&amp;copy; 2011 The Good Thymes Virtual Grocery
&lt;/footer&gt;

&lt;div&gt;
&amp;copy; 2011 The Good Thymes Virtual Grocery
&lt;/div&gt;
</code></pre>
<p>引入片段的时候传入参数：</p>
<pre><code class="language-html">&lt;nav class=&quot;col-md-2 d-none d-md-block bg-light sidebar&quot; id=&quot;sidebar&quot;&gt;
    &lt;div class=&quot;sidebar-sticky&quot;&gt;
        &lt;ul class=&quot;nav flex-column&quot;&gt;
            &lt;li class=&quot;nav-item&quot;&gt;
                &lt;a class=&quot;nav-link active&quot;
                   th:class=&quot;${activeUri=='main.html'?'nav-link active':'nav-link'}&quot;
                   href=&quot;#&quot; th:href=&quot;@{/main.html}&quot;&gt;
                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-home&quot;&gt;
                        &lt;path d=&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;&gt;&lt;/path&gt;
                        &lt;polyline points=&quot;9 22 9 12 15 12 15 22&quot;&gt;&lt;/polyline&gt;
                    &lt;/svg&gt;
                    Dashboard &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;
                &lt;/a&gt;
            &lt;/li&gt;

&lt;!--引入侧边栏;传入参数--&gt;
&lt;div th:replace=&quot;commons/bar::#sidebar(activeUri='emps')&quot;&gt;&lt;/div&gt;
</code></pre>
<h3 id="-75"></h3>
<h3 id="6-crud-员工添加">6）、CRUD-员工添加</h3>
<p>添加页面</p>
<pre><code class="language-html">&lt;form&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;LastName&lt;/label&gt;
        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Email&lt;/label&gt;
        &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan@atguigu.com&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt;
        &lt;div class=&quot;form-check form-check-inline&quot;&gt;
            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot;  value=&quot;1&quot;&gt;
            &lt;label class=&quot;form-check-label&quot;&gt;男&lt;/label&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-check form-check-inline&quot;&gt;
            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot;  value=&quot;0&quot;&gt;
            &lt;label class=&quot;form-check-label&quot;&gt;女&lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;department&lt;/label&gt;
        &lt;select class=&quot;form-control&quot;&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
        &lt;/select&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Birth&lt;/label&gt;
        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot;&gt;
    &lt;/div&gt;
    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;添加&lt;/button&gt;
&lt;/form&gt;
</code></pre>
<p>提交的数据格式不对：生日：日期；</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p>
<p>2017-12-12---Date； 类型转换，格式化;</p>
<p>默认日期是按照/的方式；</p>
<h3 id="-76"></h3>
<h3 id="7-crud-员工修改">7）、CRUD-员工修改</h3>
<p>修改添加二合一表单</p>
<pre><code class="language-html">&lt;!--需要区分是员工修改还是添加；--&gt;
&lt;form th:action=&quot;@{/emp}&quot; method=&quot;post&quot;&gt;
    &lt;!--发送put请求修改员工数据--&gt;
    &lt;!--
1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）
2、页面创建一个post表单
3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式
--&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; th:if=&quot;${emp!=null}&quot;/&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; th:if=&quot;${emp!=null}&quot; th:value=&quot;${emp.id}&quot;&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;LastName&lt;/label&gt;
        &lt;input name=&quot;lastName&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot; th:value=&quot;${emp!=null}?${emp.lastName}&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Email&lt;/label&gt;
        &lt;input name=&quot;email&quot; type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan@atguigu.com&quot; th:value=&quot;${emp!=null}?${emp.email}&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt;
        &lt;div class=&quot;form-check form-check-inline&quot;&gt;
            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; th:checked=&quot;${emp!=null}?${emp.gender==1}&quot;&gt;
            &lt;label class=&quot;form-check-label&quot;&gt;男&lt;/label&gt;
        &lt;/div&gt;
        &lt;div class=&quot;form-check form-check-inline&quot;&gt;
            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; th:checked=&quot;${emp!=null}?${emp.gender==0}&quot;&gt;
            &lt;label class=&quot;form-check-label&quot;&gt;女&lt;/label&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;department&lt;/label&gt;
        &lt;!--提交的是部门的id--&gt;
        &lt;select class=&quot;form-control&quot; name=&quot;department.id&quot;&gt;
            &lt;option th:selected=&quot;${emp!=null}?${dept.id == emp.department.id}&quot; th:value=&quot;${dept.id}&quot; th:each=&quot;dept:${depts}&quot; th:text=&quot;${dept.departmentName}&quot;&gt;1&lt;/option&gt;
        &lt;/select&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
        &lt;label&gt;Birth&lt;/label&gt;
        &lt;input name=&quot;birth&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot; th:value=&quot;${emp!=null}?${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}&quot;&gt;
    &lt;/div&gt;
    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; th:text=&quot;${emp!=null}?'修改':'添加'&quot;&gt;添加&lt;/button&gt;
&lt;/form&gt;
</code></pre>
<h3 id="-77"></h3>
<h3 id="8-crud-员工删除">8）、CRUD-员工删除</h3>
<pre><code class="language-html">&lt;tr th:each=&quot;emp:${emps}&quot;&gt;
    &lt;td th:text=&quot;${emp.id}&quot;&gt;&lt;/td&gt;
    &lt;td&gt;[[${emp.lastName}]]&lt;/td&gt;
    &lt;td th:text=&quot;${emp.email}&quot;&gt;&lt;/td&gt;
    &lt;td th:text=&quot;${emp.gender}==0?'女':'男'&quot;&gt;&lt;/td&gt;
    &lt;td th:text=&quot;${emp.department.departmentName}&quot;&gt;&lt;/td&gt;
    &lt;td th:text=&quot;${#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')}&quot;&gt;&lt;/td&gt;
    &lt;td&gt;
        &lt;a class=&quot;btn btn-sm btn-primary&quot; th:href=&quot;@{/emp/}+${emp.id}&quot;&gt;编辑&lt;/a&gt;
        &lt;button th:attr=&quot;del_uri=@{/emp/}+${emp.id}&quot; class=&quot;btn btn-sm btn-danger deleteBtn&quot;&gt;删除&lt;/button&gt;
    &lt;/td&gt;
&lt;/tr&gt;


&lt;script&gt;
    $(&quot;.deleteBtn&quot;).click(function(){
        //删除当前员工的
        $(&quot;#deleteEmpForm&quot;).attr(&quot;action&quot;,$(this).attr(&quot;del_uri&quot;)).submit();
        return false;
    });
&lt;/script&gt;
</code></pre>
<h2 id="-78"></h2>
<h2 id="7-错误处理机制">7、错误处理机制</h2>
<h3 id="-79"></h3>
<h3 id="1-springboot默认的错误处理机制">1）、SpringBoot默认的错误处理机制</h3>
<p>默认效果：</p>
<p>​		1）、浏览器，返回一个默认的错误页面</p>
<figure data-type="image" tabindex="15"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173408.png?raw=true" alt="搜狗截图20180226173408.png"></figure>
<p>浏览器发送请求的请求头：</p>
<figure data-type="image" tabindex="16"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180347.png?raw=true" alt="搜狗截图20180226180347.png"></figure>
<p>​		2）、如果是其他客户端，默认响应一个json数据</p>
<figure data-type="image" tabindex="17"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226173527.png?raw=true" alt="搜狗截图20180226173527.png"></figure>
<p>​	<img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180226180504.png?raw=true" alt="搜狗截图20180226180504.png"></p>
<p>原理：</p>
<p>​	可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p>
<pre><code>给容器中添加了以下组件
</code></pre>
<p>​	1、DefaultErrorAttributes：</p>
<pre><code class="language-java">帮我们在页面共享信息；
@Override
	public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes,
			boolean includeStackTrace) {
		Map&lt;String, Object&gt; errorAttributes = new LinkedHashMap&lt;String, Object&gt;();
		errorAttributes.put(&quot;timestamp&quot;, new Date());
		addStatus(errorAttributes, requestAttributes);
		addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);
		addPath(errorAttributes, requestAttributes);
		return errorAttributes;
	}
</code></pre>
<p>​	2、BasicErrorController：处理默认/error请求</p>
<pre><code class="language-java">@Controller
@RequestMapping(&quot;${server.error.path:${error.path:/error}}&quot;)
public class BasicErrorController extends AbstractErrorController {
    
    @RequestMapping(produces = &quot;text/html&quot;)//产生html类型的数据；浏览器发送的请求来到这个方法处理
	public ModelAndView errorHtml(HttpServletRequest request,
			HttpServletResponse response) {
		HttpStatus status = getStatus(request);
		Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(
				request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));
		response.setStatus(status.value());
        
        //去哪个页面作为错误页面；包含页面地址和页面内容
		ModelAndView modelAndView = resolveErrorView(request, response, status, model);
		return (modelAndView == null ? new ModelAndView(&quot;error&quot;, model) : modelAndView);
	}

	@RequestMapping
	@ResponseBody    //产生json数据，其他客户端来到这个方法处理；
	public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) {
		Map&lt;String, Object&gt; body = getErrorAttributes(request,
				isIncludeStackTrace(request, MediaType.ALL));
		HttpStatus status = getStatus(request);
		return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);
	}
</code></pre>
<p>​	3、ErrorPageCustomizer：</p>
<pre><code class="language-java">	@Value(&quot;${error.path:/error}&quot;)
	private String path = &quot;/error&quot;;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）
</code></pre>
<p>​	4、DefaultErrorViewResolver：</p>
<pre><code class="language-java">@Override
	public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,
			Map&lt;String, Object&gt; model) {
		ModelAndView modelAndView = resolve(String.valueOf(status), model);
		if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {
			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);
		}
		return modelAndView;
	}

	private ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) {
        //默认SpringBoot可以去找到一个页面？  error/404
		String errorViewName = &quot;error/&quot; + viewName;
        
        //模板引擎可以解析这个页面地址就用模板引擎解析
		TemplateAvailabilityProvider provider = this.templateAvailabilityProviders
				.getProvider(errorViewName, this.applicationContext);
		if (provider != null) {
            //模板引擎可用的情况下返回到errorViewName指定的视图地址
			return new ModelAndView(errorViewName, model);
		}
        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html
		return resolveResource(errorViewName, model);
	}
</code></pre>
<p>​	步骤：</p>
<p>​		一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p>
<p>​		1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p>
<pre><code class="language-java">protected ModelAndView resolveErrorView(HttpServletRequest request,
      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) {
    //所有的ErrorViewResolver得到ModelAndView
   for (ErrorViewResolver resolver : this.errorViewResolvers) {
      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);
      if (modelAndView != null) {
         return modelAndView;
      }
   }
   return null;
}
</code></pre>
<h3 id="-80"></h3>
<h3 id="2-如果定制错误响应">2）、如果定制错误响应：</h3>
<h4 id="-81"></h4>
<h4 id="1-如何定制错误的页面"><strong>1）、如何定制错误的页面；</strong></h4>
<p>​		<strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p>
<p>​		我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；</p>
<p>​		页面能获取的信息；</p>
<p>​			timestamp：时间戳</p>
<p>​			status：状态码</p>
<p>​			error：错误提示</p>
<p>​			exception：异常对象</p>
<p>​			message：异常消息</p>
<p>​			errors：JSR303数据校验的错误都在这里</p>
<p>​		2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p>
<p>​		3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p>
<h4 id="-82"></h4>
<h4 id="2-如何定制错误的json数据">2）、如何定制错误的json数据；</h4>
<p>​	1）、自定义异常处理&amp;返回定制json数据；</p>
<pre><code class="language-java">@ControllerAdvice
public class MyExceptionHandler {

    @ResponseBody
    @ExceptionHandler(UserNotExistException.class)
    public Map&lt;String,Object&gt; handleException(Exception e){
        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        map.put(&quot;code&quot;,&quot;user.notexist&quot;);
        map.put(&quot;message&quot;,e.getMessage());
        return map;
    }
}
//没有自适应效果...
</code></pre>
<p>​	2）、转发到/error进行自适应响应效果处理</p>
<pre><code class="language-java"> @ExceptionHandler(UserNotExistException.class)
    public String handleException(Exception e, HttpServletRequest request){
        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();
        //传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程
        /**
         * Integer statusCode = (Integer) request
         .getAttribute(&quot;javax.servlet.error.status_code&quot;);
         */
        request.setAttribute(&quot;javax.servlet.error.status_code&quot;,500);
        map.put(&quot;code&quot;,&quot;user.notexist&quot;);
        map.put(&quot;message&quot;,e.getMessage());
        //转发到/error
        return &quot;forward:/error&quot;;
    }
</code></pre>
<h4 id="-83"></h4>
<h4 id="3-将我们的定制数据携带出去">3）、将我们的定制数据携带出去；</h4>
<p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<p>​	1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p>
<p>​	2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p>
<p>​			容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p>
<p>自定义ErrorAttributes</p>
<pre><code class="language-java">//给容器中加入我们自己定义的ErrorAttributes
@Component
public class MyErrorAttributes extends DefaultErrorAttributes {

    @Override
    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {
        Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace);
        map.put(&quot;company&quot;,&quot;atguigu&quot;);
        return map;
    }
}
</code></pre>
<p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p>
<figure data-type="image" tabindex="18"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180228135513.png?raw=true" alt="搜狗截图20180228135513.png"></figure>
<h2 id="8-配置嵌入式servlet容器">8、配置嵌入式Servlet容器</h2>
<p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p>
<figure data-type="image" tabindex="19"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180301142915.png?raw=true" alt="搜狗截图20180301142915.png"></figure>
<p>问题？</p>
<h3 id="-84"></h3>
<h3 id="1-如何定制和修改servlet容器的相关配置">1）、如何定制和修改Servlet容器的相关配置；</h3>
<p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p>
<pre><code class="language-properties">server.port=8081
server.context-path=/crud

server.tomcat.uri-encoding=UTF-8

//通用的Servlet容器设置
server.xxx
//Tomcat的设置
server.tomcat.xxx
</code></pre>
<p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
<pre><code class="language-java">@Bean  //一定要将这个定制器加入到容器中
public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){
    return new EmbeddedServletContainerCustomizer() {

        //定制嵌入式的Servlet容器相关的规则
        @Override
        public void customize(ConfigurableEmbeddedServletContainer container) {
            container.setPort(8083);
        }
    };
}
</code></pre>
<h3 id="-85"></h3>
<h3 id="2-注册servlet三大组件servlet-filter-listener">2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3>
<p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p>ServletRegistrationBean</p>
<pre><code class="language-java">//注册三大组件
@Bean
public ServletRegistrationBean myServlet(){
    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),&quot;/myServlet&quot;);
    return registrationBean;
}
</code></pre>
<p>FilterRegistrationBean</p>
<pre><code class="language-java">@Bean
public FilterRegistrationBean myFilter(){
    FilterRegistrationBean registrationBean = new FilterRegistrationBean();
    registrationBean.setFilter(new MyFilter());
    registrationBean.setUrlPatterns(Arrays.asList(&quot;/hello&quot;,&quot;/myServlet&quot;));
    return registrationBean;
}
</code></pre>
<p>ServletListenerRegistrationBean</p>
<pre><code class="language-java">@Bean
public ServletListenerRegistrationBean myListener(){
    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;&gt;(new MyListener());
    return registrationBean;
}
</code></pre>
<p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p>
<p>DispatcherServletAutoConfiguration中：</p>
<pre><code class="language-java">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)
@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)
public ServletRegistrationBean dispatcherServletRegistration(
      DispatcherServlet dispatcherServlet) {
   ServletRegistrationBean registration = new ServletRegistrationBean(
         dispatcherServlet, this.serverProperties.getServletMapping());
    //默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp
    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径
    
   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);
   registration.setLoadOnStartup(
         this.webMvcProperties.getServlet().getLoadOnStartup());
   if (this.multipartConfig != null) {
      registration.setMultipartConfig(this.multipartConfig);
   }
   return registration;
}
</code></pre>
<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="-86"></h3>
<h3 id="3-替换为其他嵌入式servlet容器">3）、替换为其他嵌入式Servlet容器</h3>
<figure data-type="image" tabindex="20"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302114401.png" alt="img"></a></figure>
<p>默认支持：</p>
<p>Tomcat（默认使用）</p>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；
&lt;/dependency&gt;
</code></pre>
<p>Jetty</p>
<pre><code class="language-xml">&lt;!-- 引入web模块 --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
   &lt;exclusions&gt;
      &lt;exclusion&gt;
         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;/exclusion&gt;
   &lt;/exclusions&gt;
&lt;/dependency&gt;

&lt;!--引入其他的Servlet容器--&gt;
&lt;dependency&gt;
   &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;/dependency&gt;
</code></pre>
<p>Undertow</p>
<pre><code class="language-xml">&lt;!-- 引入web模块 --&gt;
&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
   &lt;exclusions&gt;
      &lt;exclusion&gt;
         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;/exclusion&gt;
   &lt;/exclusions&gt;
&lt;/dependency&gt;

&lt;!--引入其他的Servlet容器--&gt;
&lt;dependency&gt;
   &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;/dependency&gt;
</code></pre>
<h3 id="-87"></h3>
<h3 id="4-嵌入式servlet容器自动配置原理">4）、嵌入式Servlet容器自动配置原理；</h3>
<p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p>
<pre><code class="language-java">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
@Configuration
@ConditionalOnWebApplication
@Import(BeanPostProcessorsRegistrar.class)
//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件
//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：
//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作
public class EmbeddedServletContainerAutoConfiguration {
    
    @Configuration
	@ConditionalOnClass({ Servlet.class, Tomcat.class })//判断当前是否引入了Tomcat依赖；
	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器
	public static class EmbeddedTomcat {

		@Bean
		public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {
			return new TomcatEmbeddedServletContainerFactory();
		}

	}
    
    /**
	 * Nested configuration if Jetty is being used.
	 */
	@Configuration
	@ConditionalOnClass({ Servlet.class, Server.class, Loader.class,
			WebAppContext.class })
	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)
	public static class EmbeddedJetty {

		@Bean
		public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {
			return new JettyEmbeddedServletContainerFactory();
		}

	}

	/**
	 * Nested configuration if Undertow is being used.
	 */
	@Configuration
	@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })
	@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)
	public static class EmbeddedUndertow {

		@Bean
		public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {
			return new UndertowEmbeddedServletContainerFactory();
		}

	}
</code></pre>
<p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p>
<pre><code class="language-java">public interface EmbeddedServletContainerFactory {

   //获取嵌入式的Servlet容器
   EmbeddedServletContainer getEmbeddedServletContainer(
         ServletContextInitializer... initializers);

}
</code></pre>
<figure data-type="image" tabindex="21"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144835.png" alt="img"></a></figure>
<p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p>
<figure data-type="image" tabindex="22"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302144910.png" alt="img"></a></figure>
<p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p>
<pre><code class="language-java">@Override
public EmbeddedServletContainer getEmbeddedServletContainer(
      ServletContextInitializer... initializers) {
    //创建一个Tomcat
   Tomcat tomcat = new Tomcat();
    
    //配置Tomcat的基本环节
   File baseDir = (this.baseDirectory != null ? this.baseDirectory
         : createTempDir(&quot;tomcat&quot;));
   tomcat.setBaseDir(baseDir.getAbsolutePath());
   Connector connector = new Connector(this.protocol);
   tomcat.getService().addConnector(connector);
   customizeConnector(connector);
   tomcat.setConnector(connector);
   tomcat.getHost().setAutoDeploy(false);
   configureEngine(tomcat.getEngine());
   for (Connector additionalConnector : this.additionalTomcatConnectors) {
      tomcat.getService().addConnector(additionalConnector);
   }
   prepareContext(tomcat.getHost(), initializers);
    
    //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器
   return getTomcatEmbeddedServletContainer(tomcat);
}
</code></pre>
<p>4）、我们对嵌入式容器的配置修改是怎么生效？</p>
<pre><code>ServerProperties、EmbeddedServletContainerCustomizer
</code></pre>
<p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p>
<p>怎么修改的原理？</p>
<p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p>
<pre><code class="language-java">//初始化之前
@Override
public Object postProcessBeforeInitialization(Object bean, String beanName)
      throws BeansException {
    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件
   if (bean instanceof ConfigurableEmbeddedServletContainer) {
       //
      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);
   }
   return bean;
}

private void postProcessBeforeInitialization(
			ConfigurableEmbeddedServletContainer bean) {
    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；
    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {
        customizer.customize(bean);
    }
}

private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() {
    if (this.customizers == null) {
        // Look up does not include the parent context
        this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(
            this.beanFactory
            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer
            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件
            .getBeansOfType(EmbeddedServletContainerCustomizer.class,
                            false, false)
            .values());
        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);
        this.customizers = Collections.unmodifiableList(this.customizers);
    }
    return this.customizers;
}

ServerProperties也是定制器
</code></pre>
<p>步骤：</p>
<p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p>
<p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p>
<p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p>
<p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p>
<p>###5）、嵌入式Servlet容器启动原理；</p>
<p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p>
<p>获取嵌入式的Servlet容器工厂：</p>
<p>1）、SpringBoot应用启动运行run方法</p>
<p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p>
<p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p>
<pre><code class="language-java">public void refresh() throws BeansException, IllegalStateException {
   synchronized (this.startupShutdownMonitor) {
      // Prepare this context for refreshing.
      prepareRefresh();

      // Tell the subclass to refresh the internal bean factory.
      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

      // Prepare the bean factory for use in this context.
      prepareBeanFactory(beanFactory);

      try {
         // Allows post-processing of the bean factory in context subclasses.
         postProcessBeanFactory(beanFactory);

         // Invoke factory processors registered as beans in the context.
         invokeBeanFactoryPostProcessors(beanFactory);

         // Register bean processors that intercept bean creation.
         registerBeanPostProcessors(beanFactory);

         // Initialize message source for this context.
         initMessageSource();

         // Initialize event multicaster for this context.
         initApplicationEventMulticaster();

         // Initialize other special beans in specific context subclasses.
         onRefresh();

         // Check for listener beans and register them.
         registerListeners();

         // Instantiate all remaining (non-lazy-init) singletons.
         finishBeanFactoryInitialization(beanFactory);

         // Last step: publish corresponding event.
         finishRefresh();
      }

      catch (BeansException ex) {
         if (logger.isWarnEnabled()) {
            logger.warn(&quot;Exception encountered during context initialization - &quot; +
                  &quot;cancelling refresh attempt: &quot; + ex);
         }

         // Destroy already created singletons to avoid dangling resources.
         destroyBeans();

         // Reset 'active' flag.
         cancelRefresh(ex);

         // Propagate exception to caller.
         throw ex;
      }

      finally {
         // Reset common introspection caches in Spring's core, since we
         // might not ever need metadata for singleton beans anymore...
         resetCommonCaches();
      }
   }
}
</code></pre>
<p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p>
<p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p>
<p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p>
<p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p>
<p>​	从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p>
<p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p>
<p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p>
<p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p>
<p><strong>IOC容器启动创建嵌入式的Servlet容器</strong></p>
<h2 id="-88"></h2>
<h2 id="9-使用外置的servlet容器">9、使用外置的Servlet容器</h2>
<p>嵌入式Servlet容器：应用打成可执行的jar</p>
<p>​		优点：简单、便携；</p>
<p>​		 缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p>
<p>外置的Servlet容器：外面安装Tomcat---应用war包的方式打包；</p>
<h3 id="-89"></h3>
<h3 id="步骤">步骤</h3>
<p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p>
<ul>
<li>new project or new module</li>
</ul>
<figure data-type="image" tabindex="23"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/1537583437482.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/1537583437482.png" alt="1537583437482"></a></figure>
<ul>
<li>
<p>create</p>
<figure data-type="image" tabindex="24"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/1537583796091.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/1537583796091.png" alt="1537583796091"></a></figure>
</li>
<li>
<p>web.xml</p>
<figure data-type="image" tabindex="25"><img src="https://github.com/cuzz1/springboot-learning/blob/master/images/1537584525195.png?raw=true" alt="1537584525195.png"></figure>
</li>
<li>
<p>添加外部tomcat启动</p>
</li>
</ul>
<p>2）、将嵌入式的Tomcat指定为provided；</p>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;
   &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>
<p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p>
<pre><code class="language-java">public class ServletInitializer extends SpringBootServletInitializer {

   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
       //传入SpringBoot应用的主程序
      return application.sources(SpringBoot04WebJspApplication.class);
   }

}
</code></pre>
<p>4）、启动服务器就可以使用；</p>
<h3 id="-90"></h3>
<h3 id="原理">原理</h3>
<p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p>
<p>servlet3.0（Spring注解版）：</p>
<p>8.2.4 Shared libraries / runtimes pluggability：</p>
<p>规则：</p>
<p>​	1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p>
<p>​	 2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p>
<p>​	3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p>
<p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p>
<p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p>
<p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p>
<p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p>
<figure data-type="image" tabindex="26"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180302221835.png" alt="img"></a></figure>
<p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p>
<p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p>
<pre><code class="language-java">protected WebApplicationContext createRootApplicationContext(
      ServletContext servletContext) {
    //1、创建SpringApplicationBuilder
   SpringApplicationBuilder builder = createSpringApplicationBuilder();
   StandardServletEnvironment environment = new StandardServletEnvironment();
   environment.initPropertySources(servletContext, null);
   builder.environment(environment);
   builder.main(getClass());
   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);
   if (parent != null) {
      this.logger.info(&quot;Root context already created (using as parent).&quot;);
      servletContext.setAttribute(
            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);
      builder.initializers(new ParentContextApplicationContextInitializer(parent));
   }
   builder.initializers(
         new ServletContextApplicationContextInitializer(servletContext));
   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);
    
    //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来
   builder = configure(builder);
    
    //使用builder创建一个Spring应用
   SpringApplication application = builder.build();
   if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils
         .findAnnotation(getClass(), Configuration.class) != null) {
      application.getSources().add(getClass());
   }
   Assert.state(!application.getSources().isEmpty(),
         &quot;No SpringApplication sources have been defined. Either override the &quot;
               + &quot;configure method or add an @Configuration annotation&quot;);
   // Ensure error pages are registered
   if (this.registerErrorPageFilter) {
      application.getSources().add(ErrorPageFilterConfiguration.class);
   }
    //启动Spring应用
   return run(application);
}
</code></pre>
<p>7）、Spring的应用就启动并且创建IOC容器</p>
<pre><code class="language-java">public ConfigurableApplicationContext run(String... args) {
   StopWatch stopWatch = new StopWatch();
   stopWatch.start();
   ConfigurableApplicationContext context = null;
   FailureAnalyzers analyzers = null;
   configureHeadlessProperty();
   SpringApplicationRunListeners listeners = getRunListeners(args);
   listeners.starting();
   try {
      ApplicationArguments applicationArguments = new DefaultApplicationArguments(
            args);
      ConfigurableEnvironment environment = prepareEnvironment(listeners,
            applicationArguments);
      Banner printedBanner = printBanner(environment);
      context = createApplicationContext();
      analyzers = new FailureAnalyzers(context);
      prepareContext(context, environment, listeners, applicationArguments,
            printedBanner);
       
       //刷新IOC容器
      refreshContext(context);
      afterRefresh(context, applicationArguments);
      listeners.finished(context, null);
      stopWatch.stop();
      if (this.logStartupInfo) {
         new StartupInfoLogger(this.mainApplicationClass)
               .logStarted(getApplicationLog(), stopWatch);
      }
      return context;
   }
   catch (Throwable ex) {
      handleRunFailure(context, listeners, analyzers, ex);
      throw new IllegalStateException(ex);
   }
}
</code></pre>
<p><strong>启动Servlet容器，再启动SpringBoot应用</strong></p>
<h1 id="-91"></h1>
<h1 id="五-docker">五、Docker</h1>
<h2 id="-92"></h2>
<h2 id="1-简介-2">1、简介</h2>
<p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p>
<p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p>
<p>运行中的这个镜像称为容器，容器启动是非常快速的。</p>
<figure data-type="image" tabindex="27"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145450.png" alt="img"></a></figure>
<figure data-type="image" tabindex="28"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303145531.png" alt="img"></a></figure>
<h2 id="-93"></h2>
<h2 id="2-核心概念">2、核心概念</h2>
<p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p>
<p>docker客户端(Client)：连接docker主机进行操作；</p>
<p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p>
<p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p>
<p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p>
<figure data-type="image" tabindex="29"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303165113.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180303165113.png" alt="img"></a></figure>
<p>使用Docker的步骤：</p>
<p>1）、安装Docker</p>
<p>2）、去Docker仓库找到这个软件对应的镜像；</p>
<p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p>
<p>4）、对容器的启动停止就是对软件的启动停止；</p>
<h2 id="-94"></h2>
<h2 id="3-安装docker">3、安装Docker</h2>
<h3 id="-95"></h3>
<h3 id="1-安装linux虚拟机">1）、安装linux虚拟机</h3>
<p>​	1）、VMWare、VirtualBox（安装）；</p>
<p>​	2）、导入虚拟机文件centos7-atguigu.ova；</p>
<p>​	3）、双击启动linux虚拟机;使用  root/ 123456登陆</p>
<p>​	4）、使用客户端连接linux服务器进行命令操作；</p>
<p>​	5）、设置虚拟机网络；</p>
<p>​		桥接网络=<mark>选好网卡</mark>==接入网线；</p>
<p>​	6）、设置好网络以后使用命令重启虚拟机的网络</p>
<pre><code>service network restart
</code></pre>
<p>​	7）、查看linux的ip地址</p>
<pre><code>ip addr
</code></pre>
<p>​	8）、使用客户端连接linux；</p>
<h3 id="-96"></h3>
<h3 id="2-在linux虚拟机上安装docker">2）、在linux虚拟机上安装docker</h3>
<p>步骤：</p>
<pre><code>1、检查内核版本，必须是3.10及以上
uname -r
2、安装docker
yum install docker
3、输入y确认安装
4、启动docker
[root@localhost ~]# systemctl start docker
[root@localhost ~]# docker -v
Docker version 1.12.6, build 3e8e77d/1.12.6
5、开机启动docker
[root@localhost ~]# systemctl enable docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
6、停止docker
systemctl stop docker
</code></pre>
<h2 id="-97"></h2>
<h2 id="4-docker常用命令操作">4、Docker常用命令&amp;操作</h2>
<h3 id="-98"></h3>
<h3 id="1-镜像操作">1）、镜像操作</h3>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>检索</td>
<td>docker  search 关键字  eg：docker  search redis</td>
<td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td>
</tr>
<tr>
<td>拉取</td>
<td>docker pull 镜像名:tag</td>
<td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td>
</tr>
<tr>
<td>列表</td>
<td>docker images</td>
<td>查看所有本地镜像</td>
</tr>
<tr>
<td>删除</td>
<td>docker rmi image-id</td>
<td>删除指定的本地镜像</td>
</tr>
</tbody>
</table>
<p>https://hub.docker.com/</p>
<h3 id="-99"></h3>
<h3 id="2-容器操作">2）、容器操作</h3>
<p>软件镜像（QQ安装程序）----运行镜像----产生一个容器（正在运行的软件，运行的QQ）；</p>
<p>步骤：</p>
<pre><code>1、搜索镜像
[root@localhost ~]# docker search tomcat
2、拉取镜像
[root@localhost ~]# docker pull tomcat
3、根据镜像启动容器
docker run --name mytomcat -d tomcat:latest
4、docker ps  
查看运行中的容器
5、 停止运行中的容器
docker stop  容器的id
6、查看所有的容器
docker ps -a
7、启动容器
docker start 容器id
8、删除一个容器
 docker rm 容器id
9、启动一个做了端口映射的tomcat
[root@localhost ~]# docker run -d -p 8888:8080 tomcat
-d：后台运行
-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口

10、为了演示简单关闭了linux的防火墙
service firewalld status ；查看防火墙状态
service firewalld stop：关闭防火墙
11、查看容器的日志
docker logs container-name/container-id

更多命令参看
https://docs.docker.com/engine/reference/commandline/docker/
可以参考每一个镜像的文档
</code></pre>
<h3 id="-100"></h3>
<h3 id="3-安装mysql示例">3）、安装MySQL示例</h3>
<pre><code>docker pull mysql
</code></pre>
<p>错误的启动</p>
<pre><code>[root@localhost ~]# docker run --name mysql01 -d mysql
42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846

mysql退出了
[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES
42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01
538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_
goldstine
c4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi
81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan


//错误日志
[root@localhost ~]# docker logs 42f09819908b
error: database is uninitialized and password option is not specified 
  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个
</code></pre>
<p>正确的启动</p>
<pre><code>[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysql
b874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f
[root@localhost ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
b874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01
</code></pre>
<p>做了端口映射</p>
<pre><code>[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysql
ad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434
[root@localhost ~]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
ad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02
</code></pre>
<p>几个其他的高级操作</p>
<pre><code>docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag
把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面
改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）

docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
指定mysql的一些配置参数
</code></pre>
<h1 id="-101"></h1>
<h1 id="六-springboot与数据访问">六、SpringBoot与数据访问</h1>
<h2 id="-102"></h2>
<h2 id="1-jdbc">1、JDBC</h2>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;mysql&lt;/groupId&gt;
			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
		&lt;/dependency&gt;
spring:
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://192.168.15.22:3306/jdbc
    driver-class-name: com.mysql.jdbc.Driver
</code></pre>
<p>效果：</p>
<p>​	默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p>
<p>​	数据源的相关配置都在DataSourceProperties里面；</p>
<p>自动配置原理：</p>
<p>org.springframework.boot.autoconfigure.jdbc：</p>
<p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p>
<p>2、SpringBoot默认可以支持；</p>
<pre><code>org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、
</code></pre>
<p>3、自定义数据源类型</p>
<pre><code class="language-java">/**
 * Generic DataSource configuration.
 */
@ConditionalOnMissingBean(DataSource.class)
@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)
static class Generic {

   @Bean
   public DataSource dataSource(DataSourceProperties properties) {
       //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性
      return properties.initializeDataSourceBuilder().build();
   }

}
</code></pre>
<p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p>
<p>​	作用：</p>
<p>​		1）、runSchemaScripts();运行建表语句；</p>
<p>​		2）、runDataScripts();运行插入数据的sql语句；</p>
<p>默认只需要将文件命名为：</p>
<pre><code>schema-*.sql、data-*.sql
默认规则：schema.sql，schema-all.sql；
可以使用   
	schema:
      - classpath:department.sql
      指定位置
</code></pre>
<p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p>
<h2 id="-103"></h2>
<h2 id="2-整合druid数据源">2、整合Druid数据源</h2>
<pre><code class="language-java">导入druid数据源
@Configuration
public class DruidConfig {

    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)
    @Bean
    public DataSource druid(){
       return  new DruidDataSource();
    }

    //配置Druid的监控
    //1、配置一个管理后台的Servlet
    @Bean
    public ServletRegistrationBean statViewServlet(){
        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);
        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();

        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);
        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);
        initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问
        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);

        bean.setInitParameters(initParams);
        return bean;
    }


    //2、配置一个web监控的filter
    @Bean
    public FilterRegistrationBean webStatFilter(){
        FilterRegistrationBean bean = new FilterRegistrationBean();
        bean.setFilter(new WebStatFilter());

        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();
        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);

        bean.setInitParameters(initParams);

        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));

        return  bean;
    }
}
</code></pre>
<h2 id="-104"></h2>
<h2 id="3-整合mybatis">3、整合MyBatis</h2>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
			&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
			&lt;version&gt;1.3.1&lt;/version&gt;
		&lt;/dependency&gt;
</code></pre>
<figure data-type="image" tabindex="30"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180305194443.png" alt="img"></a></figure>
<p>步骤：</p>
<p>​	1）、配置数据源相关属性（见上一节Druid）</p>
<p>​	2）、给数据库建表</p>
<p>​	3）、创建JavaBean</p>
<h3 id="-105"></h3>
<h3 id="4-注解版">4）、注解版</h3>
<pre><code class="language-java">//指定这是一个操作数据库的mapper
@Mapper
public interface DepartmentMapper {

    @Select(&quot;select * from department where id=#{id}&quot;)
    public Department getDeptById(Integer id);

    @Delete(&quot;delete from department where id=#{id}&quot;)
    public int deleteDeptById(Integer id);

    @Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)
    @Insert(&quot;insert into department(departmentName) values(#{departmentName})&quot;)
    public int insertDept(Department department);

    @Update(&quot;update department set departmentName=#{departmentName} where id=#{id}&quot;)
    public int updateDept(Department department);
}
</code></pre>
<p>问题：</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p>
<pre><code class="language-java">@org.springframework.context.annotation.Configuration
public class MyBatisConfig {

    @Bean
    public ConfigurationCustomizer configurationCustomizer(){
        return new ConfigurationCustomizer(){

            @Override
            public void customize(Configuration configuration) {
                configuration.setMapUnderscoreToCamelCase(true);
            }
        };
    }
}
使用MapperScan批量扫描所有的Mapper接口；
@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)
@SpringBootApplication
public class SpringBoot06DataMybatisApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);
	}
}
</code></pre>
<h3 id="-106"></h3>
<h3 id="5-配置文件版">5）、配置文件版</h3>
<pre><code>mybatis:
  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置
  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置
</code></pre>
<p>更多使用参照</p>
<p>http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</p>
<h2 id="-107"></h2>
<h2 id="4-整合springdata-jpa">4、整合SpringData JPA</h2>
<h3 id="-108"></h3>
<h3 id="1-springdata简介">1）、SpringData简介</h3>
<figure data-type="image" tabindex="31"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png" alt="img"></a></figure>
<h3 id="-109"></h3>
<h3 id="2-整合springdata-jpa">2）、整合SpringData JPA</h3>
<p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<pre><code class="language-java">//使用JPA注解配置映射关系
@Entity //告诉JPA这是一个实体类（和数据表映射的类）
@Table(name = &quot;tbl_user&quot;) //@Table来指定和哪个数据表对应;如果省略默认表名就是user；
public class User {

    @Id //这是一个主键
    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键
    private Integer id;

    @Column(name = &quot;last_name&quot;,length = 50) //这是和数据表对应的一个列
    private String lastName;
    @Column //省略默认列名就是属性名
    private String email;
</code></pre>
<p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<pre><code class="language-java">//继承JpaRepository来完成对数据库的操作
public interface UserRepository extends JpaRepository&lt;User,Integer&gt; {
}
</code></pre>
<p>3）、基本的配置JpaProperties</p>
<pre><code class="language-properties">spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/jpa
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
  jpa:
    hibernate:
      # 更新或者创建数据表结构
      ddl-auto: update
    # 控制台显示SQL
    show-sql: true
</code></pre>
<p>4）、controller</p>
<pre><code class="language-java">@RestController
public class UserController {

    @Autowired
    UserRepository userRepository;

    @GetMapping(&quot;/user/{id}&quot;)
    public User getUser(@PathVariable(&quot;id&quot;) Integer id) {
        // 用2.0这快会报错 换1.5就好了
        User user = userRepository.findOne(id);
        return null;
    }

    @GetMapping(&quot;/user&quot;)
    public User insertUser(User user) {
        User save = userRepository.save(user);
        return save;
    }
}
</code></pre>
<h1 id="-110"></h1>
<h1 id="七-启动配置原理">七、启动配置原理</h1>
<p>几个重要的事件回调机制</p>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<p><strong>SpringApplicationRunListener</strong></p>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<p><strong>CommandLineRunner</strong></p>
<p>启动流程：</p>
<h2 id="-111"></h2>
<h2 id="1-创建springapplication对象"><strong>1、创建SpringApplication对象</strong></h2>
<pre><code class="language-java">initialize(sources);
private void initialize(Object[] sources) {
    //保存主配置类
    if (sources != null &amp;&amp; sources.length &gt; 0) {
        this.sources.addAll(Arrays.asList(sources));
    }
    //判断当前是否一个web应用
    this.webEnvironment = deduceWebEnvironment();
    //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来
    setInitializers((Collection) getSpringFactoriesInstances(
        ApplicationContextInitializer.class));
    //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener
    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
    //从多个配置类中找到有main方法的主配置类
    this.mainApplicationClass = deduceMainApplicationClass();
}
</code></pre>
<figure data-type="image" tabindex="32"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145727.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145727.png" alt="img"></a></figure>
<figure data-type="image" tabindex="33"><a href="https://github.com/cuzz1/springboot-learning/blob/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145855.png"><img src="https://github.com/cuzz1/springboot-learning/raw/master/images/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306145855.png" alt="img"></a></figure>
<h2 id="-112"></h2>
<h2 id="2-运行run方法">2、运行run方法</h2>
<pre><code class="language-java">public ConfigurableApplicationContext run(String... args) {
   StopWatch stopWatch = new StopWatch();
   stopWatch.start();
   ConfigurableApplicationContext context = null;
   FailureAnalyzers analyzers = null;
   configureHeadlessProperty();
    
   //获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories
   SpringApplicationRunListeners listeners = getRunListeners(args);
    //回调所有的获取SpringApplicationRunListener.starting()方法
   listeners.starting();
   try {
       //封装命令行参数
      ApplicationArguments applicationArguments = new DefaultApplicationArguments(
            args);
      //准备环境
      ConfigurableEnvironment environment = prepareEnvironment(listeners,
            applicationArguments);
       		//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成
       
      Banner printedBanner = printBanner(environment);
       
       //创建ApplicationContext；决定创建web的ioc还是普通的ioc
      context = createApplicationContext();
       
      analyzers = new FailureAnalyzers(context);
       //准备上下文环境;将environment保存到ioc中；而且applyInitializers()；
       //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法
       //回调所有的SpringApplicationRunListener的contextPrepared()；
       //
      prepareContext(context, environment, listeners, applicationArguments,
            printedBanner);
       //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；
       
       //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版
       //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）
      refreshContext(context);
       //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调
       //ApplicationRunner先回调，CommandLineRunner再回调
      afterRefresh(context, applicationArguments);
       //所有的SpringApplicationRunListener回调finished方法
      listeners.finished(context, null);
      stopWatch.stop();
      if (this.logStartupInfo) {
         new StartupInfoLogger(this.mainApplicationClass)
               .logStarted(getApplicationLog(), stopWatch);
      }
       //整个SpringBoot应用启动完成以后返回启动的ioc容器；
      return context;
   }
   catch (Throwable ex) {
      handleRunFailure(context, listeners, analyzers, ex);
      throw new IllegalStateException(ex);
   }
}
</code></pre>
<h2 id="-113"></h2>
<h2 id="3-事件监听机制">3、事件监听机制</h2>
<p>配置在META-INF/spring.factories</p>
<p><strong>ApplicationContextInitializer</strong></p>
<pre><code class="language-java">public class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; {
    @Override
    public void initialize(ConfigurableApplicationContext applicationContext) {
        System.out.println(&quot;ApplicationContextInitializer...initialize...&quot;+applicationContext);
    }
}
</code></pre>
<p><strong>SpringApplicationRunListener</strong></p>
<pre><code class="language-java">public class HelloSpringApplicationRunListener implements SpringApplicationRunListener {

    //必须有的构造器
    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){

    }

    @Override
    public void starting() {
        System.out.println(&quot;SpringApplicationRunListener...starting...&quot;);
    }

    @Override
    public void environmentPrepared(ConfigurableEnvironment environment) {
        Object o = environment.getSystemProperties().get(&quot;os.name&quot;);
        System.out.println(&quot;SpringApplicationRunListener...environmentPrepared..&quot;+o);
    }

    @Override
    public void contextPrepared(ConfigurableApplicationContext context) {
        System.out.println(&quot;SpringApplicationRunListener...contextPrepared...&quot;);
    }

    @Override
    public void contextLoaded(ConfigurableApplicationContext context) {
        System.out.println(&quot;SpringApplicationRunListener...contextLoaded...&quot;);
    }

    @Override
    public void finished(ConfigurableApplicationContext context, Throwable exception) {
        System.out.println(&quot;SpringApplicationRunListener...finished...&quot;);
    }
}
</code></pre>
<p>配置（META-INF/spring.factories）</p>
<pre><code class="language-xml">org.springframework.context.ApplicationContextInitializer=\
com.atguigu.springboot.listener.HelloApplicationContextInitializer

org.springframework.boot.SpringApplicationRunListener=\
com.atguigu.springboot.listener.HelloSpringApplicationRunListener
</code></pre>
<p>只需要放在ioc容器中</p>
<p><strong>ApplicationRunner</strong></p>
<pre><code class="language-java">@Component
public class HelloApplicationRunner implements ApplicationRunner {
    @Override
    public void run(ApplicationArguments args) throws Exception {
        System.out.println(&quot;ApplicationRunner...run....&quot;);
    }
}
</code></pre>
<p><strong>CommandLineRunner</strong></p>
<pre><code class="language-java">@Component
public class HelloCommandLineRunner implements CommandLineRunner {
    @Override
    public void run(String... args) throws Exception {
        System.out.println(&quot;CommandLineRunner...run...&quot;+ Arrays.asList(args));
    }
}
</code></pre>
<h1 id="-114"></h1>
<h1 id="八-自定义starter">八、自定义starter</h1>
<p>starter：</p>
<p>​	1、这个场景需要使用到的依赖是什么？</p>
<p>​	2、如何编写自动配置</p>
<pre><code class="language-java">@Configuration  //指定这个类是一个配置类
@ConditionalOnXXX  //在指定条件成立的情况下自动配置类生效
@AutoConfigureAfter  //指定自动配置类的顺序
@Bean  //给容器中添加组件

@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置
@EnableConfigurationProperties //让xxxProperties生效加入到容器中

自动配置类要能加载
将需要启动就加载的自动配置类，配置在META-INF/spring.factories
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\
</code></pre>
<p>​	3、模式：</p>
<p>启动器只用来做依赖导入；</p>
<p>专门来写一个自动配置模块；</p>
<p>启动器依赖自动配置；别人只需要引入启动器（starter）</p>
<p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p>
<p>步骤：</p>
<p>1）、启动器模块</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;
    &lt;artifactId&gt;atguigu-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

    &lt;!--启动器--&gt;
    &lt;dependencies&gt;

        &lt;!--引入自动配置模块--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;
            &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt;
            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;
</code></pre>
<p>2）、自动配置模块</p>
<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

   &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;
   &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt;
   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
   &lt;packaging&gt;jar&lt;/packaging&gt;

   &lt;name&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/name&gt;
   &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

   &lt;parent&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
      &lt;version&gt;1.5.10.RELEASE&lt;/version&gt;
      &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
   &lt;/parent&gt;

   &lt;properties&gt;
      &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
      &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
      &lt;java.version&gt;1.8&lt;/java.version&gt;
   &lt;/properties&gt;

   &lt;dependencies&gt;

      &lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;
      &lt;dependency&gt;
         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
         &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
      &lt;/dependency&gt;

   &lt;/dependencies&gt;



&lt;/project&gt;
package com.atguigu.starter;

import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)
public class HelloProperties {

    private String prefix;
    private String suffix;

    public String getPrefix() {
        return prefix;
    }

    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }

    public String getSuffix() {
        return suffix;
    }

    public void setSuffix(String suffix) {
        this.suffix = suffix;
    }
}
package com.atguigu.starter;

public class HelloService {

    HelloProperties helloProperties;

    public HelloProperties getHelloProperties() {
        return helloProperties;
    }

    public void setHelloProperties(HelloProperties helloProperties) {
        this.helloProperties = helloProperties;
    }

    public String sayHellAtguigu(String name){
        return helloProperties.getPrefix()+&quot;-&quot; +name + helloProperties.getSuffix();
    }
}
package com.atguigu.starter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConditionalOnWebApplication //web应用才生效
@EnableConfigurationProperties(HelloProperties.class)
public class HelloServiceAutoConfiguration {

    @Autowired
    HelloProperties helloProperties;
    @Bean
    public HelloService helloService(){
        HelloService service = new HelloService();
        service.setHelloProperties(helloProperties);
        return service;
    }
}
</code></pre>
]]></content>
    </entry>
</feed>